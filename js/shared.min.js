"use strict";
function hideSlideshow() {
  $(".ken-burns.kenBurnsSlideshow").addClass("hidden");
  $(".toggle-slideshow").addClass("hidden");
  sessionStorage.setItem("booking-hide-slideshow", "true");
}
function expandSlideshow() {
  sessionStorage.setItem("booking-hide-slideshow", "false");
  $(".ken-burns.kenBurnsSlideshow").removeClass("hidden");
  $(".toggle-slideshow").removeClass("hidden");
  window.scrollTo({ top: 0, behavior: "smooth" });
}
function Ajax(n) {
  if (
    n.url != null &&
    (AJAX_CALLS_IN_PROGRESS == 0 || n.ignoreCallInProgress)
  ) {
    AJAX_CALLS_IN_PROGRESS++;
    (n.noLoadingSpinner == null || n.noLoadingSpinner == !1) &&
      $(".loading-overlay").addClass("visible");
    n.type == null && (n.type = "POST");
    var t = General.GetBaseURL();
    return (
      n.baseUrl && (t = n.baseUrl),
      $.ajax({
        url: t + n.url,
        type: n.type,
        data: n.data,
        headers: { "X-CSRF-Token": $("#MCSRF").val() },
        success: function (t, i, r) {
          if (
            (checkForErrorResponse(r),
            LoadAjaxResult(t, null),
            t.success != null && t.success == !0)
          )
            n.success != null && n.success(t);
          else if (
            (n.error != null && n.error(t),
            t.error != null && t.error.length > 0)
          ) {
            if (t.reloadPage === !0) {
              window.location.reload();
              return;
            }
            t.errorCode == "invalidGuests" &&
              $(".guest-filter").addClass("invalid");
            PopupMsg.showError(t.error);
          }
        },
        error: function (t, i, r) {
          checkForErrorResponse(r);
          n.error != null && n.error(t);
        },
      }).always(function () {
        AJAX_CALLS_IN_PROGRESS--;
        AJAX_CALLS_IN_PROGRESS == 0 &&
          $(".loading-overlay").removeClass("visible");
      })
    );
  }
  if (n.url != null) {
    let n = $.Deferred();
    return n.reject(CALL_IN_PROGRESS), console.error(CALL_IN_PROGRESS), n;
  }
}
function LoadAjaxResult(n, t) {
  if (
    (n.redirect != null &&
      n.redirect.length > 0 &&
      (window.location.href = n.redirect),
    n.error == !0)
  ) {
    $(location).attr(
      "href",
      "/resnexus/reservations/Error?source=" +
        encodeURIComponent($(location).attr("href"))
    );
    return;
  }
  if (n.captcha == !0) {
    $(location).attr(
      "href",
      "/resnexus/reservations/Error/banned?source=" +
        encodeURIComponent(n.redirect)
    );
    return;
  }
  if (
    (LoadMap(n),
    LoadCart(n),
    LoadReservationInfoBar(n),
    LoadListings(n),
    LoadPaypalExpress(n),
    LoadClassFilter(n),
    LoadLockFee(n),
    LoadSideBars(n),
    n.availabilityGrid != null && n.availabilityGrid != "")
  ) {
    $(".availability-grid").replaceWith(n.availabilityGrid);
    try {
      AvailabilityGrid.Initialize();
    } catch (i) {}
  }
  n.popupvalidationfailed != null &&
    ToggleDialog(n.popupvalidationfailed, n.popupwidth);
  t != null && GoToByScroll(t);
  typeof Paperboy != "undefined" &&
    Paperboy.PriceCheck &&
    Paperboy.PriceCheck.reset();
}
function LoadSideBars(n) {
  n.sideBarHtml != null &&
    ($(".search-filters .search-filter-section.sidebar-section").remove(),
    $(".search-filters").append(n.sideBarHtml));
}
function LoadClassFilter(n) {
  n.classFilter != null &&
    $(".class-filter-section").replaceWith(n.classFilter);
}
function LoadMap(n) {
  n.mapResult != null &&
    n.mapResult.length > 0 &&
    ($(".searchResultsContainer").html(n.mapResult), BookGen6.InitializeMaps());
}
function LoadReservationInfoBar(n) {
  if (
    n &&
    n.length != 0 &&
    n.reservationInfoBar &&
    n.reservationInfoBar.length != 0
  ) {
    let t = $(".reservation-info-bar");
    if (t && t.length != 0) {
      let r = $(n.reservationInfoBar);
      r.removeClass("preloaded");
      let i = $(".checkout-panel.cart-view .scrollable-content .cart-item");
      if (i && i.length != 0) {
        let n = t.hasClass("visible");
        n && r.addClass("visible");
      } else t.removeClass("visible");
      t.replaceWith(r);
      i &&
        i.length > 0 &&
        setTimeout(function () {
          $(".reservation-info-bar").addClass("visible");
        }, 20);
    }
  }
}
function LoadListings(n) {
  if (n && n.length != 0 && n.listings && n.listings.length != 0) {
    let t = $(".searchResultsContainer");
    t &&
      t.length != 0 &&
      (t.hasClass("packageWizard") && (t = t.find(".listingResultsContainer")),
      t.html(n.listings),
      BookGen6 &&
        (BookGen6.InitializeRoomCards(), BookGen6.InitializePackageCards()));
  }
}
function LoadCart(n) {
  if (n && n.length != 0 && n.cart && n.cart.length != 0) {
    let t = $(".checkout-panel.cart-view");
    if (t && t.length != 0) {
      let i = $(n.cart),
        r = t.hasClass("visible");
      r && i.addClass("visible");
      t.replaceWith(i);
      hideSlideshow();
    }
  }
}
function LoadPaypalExpress(n) {
  if (
    n &&
    n.length != 0 &&
    n.paypalExpressHtml &&
    n.paypalExpressHtml.length != 0
  ) {
    let t = $(".pp-checkout-contents");
    t && t.length != 0 && t.html(n.paypalExpressHtml);
  }
}
function LoadLockFee(n) {
  if (n && n.length != 0 && n.lockFee && n.lockFee.length != 0) {
    let t = $("#lockfeepopup-wrapper");
    (t && t.length != 0) ||
      ((t = $('<div id="lockfeepopup-wrapper"></div>')), $("body").append(t));
    t.replaceWith(n.lockFee);
  }
}
function RegisterStopTransitionEffectsOnResize() {
  let n = null;
  window.addEventListener("resize", function () {
    Header.AdjustForRNWHeader();
    n ? (clearTimeout(n), (n = null)) : $("body").addClass("stop-transition");
    n = setTimeout(() => {
      $("body").removeClass("stop-transition"), (n = null);
    }, 100);
  });
}
function checkForErrorResponse(n) {
  n.getResponseHeader("SystemError") !== null &&
    (window.location.href = n.getResponseHeader("Location"));
}
function createCookie(n, t, i) {
  var u, r;
  i
    ? ((r = new Date()),
      r.setTime(r.getTime() + i * 864e5),
      (u = "; expires=" + r.toGMTString()))
    : (u = "");
  document.cookie = n + "=" + t + u + "; path=/";
}
function readCookie(n) {
  for (
    var t, r = n + "=", u = document.cookie.split(";"), i = 0;
    i < u.length;
    i++
  ) {
    for (t = u[i]; t.charAt(0) == " "; ) t = t.substring(1, t.length);
    if (t.indexOf(r) == 0) return t.substring(r.length, t.length);
  }
  return null;
}
function eraseCookie(n) {
  createCookie(n, "", -1);
}
function areCookiesEnabled() {
  var n = !1;
  return (
    createCookie("testing", "Hello", 1),
    readCookie("testing") != null && ((n = !0), eraseCookie("testing")),
    n
  );
}
function AutoCompleteTextbox(n, t, i) {
  this.isCountry = i != null ? !0 : !1;
  this.$state = i;
  this.$txt = n;
  this.data = t;
  this.elements = [];
  this.timeout = null;
  this.$container = null;
  this.matches = 0;
  this.$selection = null;
  this.blurTimeout = null;
  this.Initialize();
}
function ExpirationDatePicker(n) {
  this.$container = n;
  this.$txt = n.find("input");
  this.$month = n.find(".month-picker");
  this.$year = n.find(".year-picker");
  this.open = !1;
  let t = this;
  this.$txt.on("click", function (n) {
    n.stopPropagation();
  });
  this.$txt.on("focus", function () {
    t.open ? t.Close() : t.ShowMonth();
  });
  let i = new RegExp(/^(\d{1,2})[-\/](\d{2,4})$/);
  this.$txt.on("blur", function () {
    let n = i.exec($(this).val());
    if (n != null) {
      console.log(n);
      let t = n[1];
      t.length == 1 && (t = "0" + t);
      let i = parseInt(n[2]);
      i < 2e3 && (i += 2e3);
      $(this).val(t + "/" + i);
    }
  });
  this.$month.find("div:not(.title)").on("click", function (n) {
    n.stopPropagation();
    t.$txt.val($(this).text()).trigger("change");
    t.ShowYear();
  });
  this.$year.find("div:not(.title)").on("click", function (n) {
    n.stopPropagation();
    let i = t.$txt.val();
    t.$txt.val(i + "/20" + $(this).text()).trigger("change");
    t.Close();
  });
  $(window).on("click", function () {
    t.open && t.Close();
  });
}
function combineURLSearchParams(n, t) {
  for (var [i, r] of t.entries()) n.append(i, r);
  return n;
}
function getRateTypeID(n) {
  let t = null;
  if (n != null) {
    let i = $(n)
      .closest(".room-card")
      .find(".room-rates-dropdown input[type=radio]:checked");
    if (i.length > 0) t = i.data("rateid");
    else if ($(n).closest("#ListingDetails-panel").length > 0) {
      let r = $(n).closest(".room-card").data("id"),
        i = $('.desktop-grid .room-card[data-id="' + r + '"]');
      if (i.length > 0) {
        let n = i.find(".room-rates-dropdown input[type=radio]:checked");
        n.length > 0 && (t = n.data("rateid"));
      }
    }
  }
  return t;
}
function ShowRetailPopup(n) {
  Ajax({ url: "RetailPopup", data: { id: n } }).then((n) => {
    n.success && $("body").append(n.retailPopupHtml);
  });
}
function getISODate(n) {
  return n.getFullYear() + "-" + (n.getMonth() + 1) + "-" + n.getDate();
}
async function IsDateOccpied(n, t, i, r) {
  r == null && (r = !1);
  let u = n.toString() + t.toString() + i;
  if (u in window.cachedOccupiedDates) return window.cachedOccupiedDates[u];
  let s = new Date(n),
    e = new Date(n);
  e.setDate(1);
  let o = await GetOccupancyForMonth(e, t, i, r),
    f = !1;
  for (let t = 0; t < o.length; t++) {
    let i = new Date(o[t]).getTime();
    if (i == n) {
      f = !0;
      break;
    }
  }
  return (window.cachedOccupiedDates[u] = f), f;
}
function GetOccupancyForMonth(n, t, i, r) {
  return (
    r == null && (r = !1),
    new Promise(function (u, f) {
      if (window.HideOccupancy === !0 && !r) {
        u([]);
        return;
      }
      let o = getISODate(n),
        e = getISODate(n) + t + i;
      if (
        (i != null &&
          (window.OccupancyByClass[i] == null ||
            window.OccupancyByClass[i][o] == null)) ||
        (i == null && window.OccupancyByMonth[o] == null)
      ) {
        if (OccupancyPromises[e] == null) {
          OccupancyPromises[e] = [];
          let n = !1;
          window.location.href
            .toLowerCase()
            .indexOf("/resnexus/reservations/worryfreeresnexus") > 0 &&
            (n = !0);
          $.ajax({
            url: General.GetBaseURL() + "GetCalendarOccupancy",
            method: "POST",
            data: { startOfMonth: o, classID: i, worryFreeMode: n },
          })
            .done(function (n) {
              if (!n.success) {
                f();
                return;
              }
              if (i == null || i == "") {
                let i = {
                  ByRoom: JSON.parse(n.ByRoom),
                  Occupancy: JSON.parse(n.Occupancy),
                };
                if (((window.OccupancyByMonth[o] = i), t != "all")) {
                  let n = i.ByRoom[t.toString()];
                  u(n);
                  OccupancyPromises[e] != null &&
                    OccupancyPromises[e].forEach((t) => {
                      t(n);
                    });
                } else
                  u(i.Occupancy),
                    OccupancyPromises[e] != null &&
                      OccupancyPromises[e].forEach((n) => {
                        n(i.Occupancy);
                      });
              } else {
                let t = JSON.parse(n.occupancy);
                window.OccupancyByClass[i] == null &&
                  (window.OccupancyByClass[i] = {});
                window.OccupancyByClass[i][o] = t;
                u(t);
                OccupancyPromises[e] != null &&
                  OccupancyPromises[e].forEach((n) => {
                    n(t);
                  });
              }
            })
            .fail(function () {
              f();
            });
        } else OccupancyPromises[e].push(u);
        return;
      }
      i == null
        ? t != "all"
          ? u(window.OccupancyByMonth[o].ByRoom[t.toString()])
          : u(window.OccupancyByMonth[o].Occupancy)
        : u(window.OccupancyByClass[i][o]);
    })
  );
}
var PopupMsg,
  BOOK_PATH,
  BookGen6,
  RoomGallery,
  miniCal,
  DEFAULT_RN_HEADER_HEIGHT,
  Header;
let UUIDReg = new RegExp(
    /^\/resnexus\/reservations\/(?:book|worryfree|worryfreeresnexus|gateway)\/([0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})/,
    "i"
  ),
  DESKTOP_WIDTH = 1260,
  TABLET_WIDTH = 850,
  IS_DESKTOP = window.innerWidth > DESKTOP_WIDTH,
  IS_TABLET = !IS_DESKTOP && window.innerWidth > TABLET_WIDTH,
  DISPLAY_LOCALE = "en";
$("#Languages").length > 0 && (DISPLAY_LOCALE = $("#Languages").val());
var General = {
    WaitAsync: function (n) {
      return new Promise((t) => {
        setTimeout(() => t(), n);
      });
    },
    ShowWarningAlert: async function (n, t) {
      t == undefined && (t = 3e3);
      let i = $(
        '<div class="warningAlert floatingAlert"><span></span><div class="close">&times;</div></div>'
      );
      i.find("span").text(n);
      i.appendTo($("body"));
      i.find(".close").on("click", function () {
        i.addClass("hidden");
      });
      await General.WaitAsync(t);
      i.addClass("hidden");
      await General.WaitAsync(1e3);
      i.remove();
    },
    StringFormat: function () {
      let n = arguments[0];
      for (let t = 0; t < arguments.length - 1; t++) {
        let i = "\\{" + t + "\\}",
          r = new RegExp(i, "g"),
          u = arguments[t + 1];
        n = n.replace(r, u);
      }
      return n;
    },
    ScrollData: { LastPosition: window.scrollY },
    WindowScroll: function () {
      if (!(Math.abs(window.scrollY - General.ScrollData.LastPosition) < 100)) {
        let n = !1;
        window.scrollY >
          $("header, .rn-website-header").outerHeight() +
            $(".red-dropdown-bar").outerHeight() &&
          window.scrollY > General.ScrollData.LastPosition &&
          (n = !0);
        n
          ? $("header, .rn-website-header, .red-dropdown-bar").addClass(
              "hidden"
            )
          : $("header, .rn-website-header, .red-dropdown-bar").removeClass(
              "hidden"
            );
        General.ScrollData.LastPosition = window.scrollY;
      }
    },
    RegisterScroll: function () {
      window.addEventListener("scroll", General.WindowScroll, { passive: !0 });
    },
    UnregisterScroll: function () {
      window.removeEventListener("scroll", General.WindowScroll, {
        passive: !0,
      });
      $("header, .red-dropdown-bar").removeClass("hidden");
      General.ScrollData.LastPosition = 0;
    },
    DisableBodyScroll: function () {
      $("body").css({ overflow: "hidden" });
    },
    EnableBodyScroll: function () {
      $("body").css({ overflow: "auto" });
    },
    InitializeMenu: function () {
      $("header .triple-menu")
        .off("click")
        .on("click", function () {
          General.ToggleMenu();
        });
      $(window).on("resize", function () {
        IS_DESKTOP = window.innerWidth > DESKTOP_WIDTH;
        IS_TABLET = !IS_DESKTOP && window.innerWidth > TABLET_WIDTH;
        Header.AdjustForRNWHeader();
        $(".cart-view").hasClass("visible") &&
          IS_DESKTOP &&
          BookGen6.HideCart();
      });
      General.RegisterScroll();
      $(document).ready(Header.Initialize);
      Header.AdjustForRNWHeader();
      $(".internationalization-menu .setting-icon").on("click", function () {
        $(".internationalization-menu .menu-content").toggleClass("visible");
      });
      $(".internationalization-menu select").on("change", function () {
        $(".internationalization-menu .menu-content").removeClass("visible");
      });
    },
    InitializePopupPanels: function () {
      $(".popupPanelButton").on("click", function () {
        let t = $(this).data("id"),
          n = $("#" + t);
        n && !n.hasClass("visible") && n.addClass("visible");
        General.UnregisterScroll();
      });
      $(".popup-panel .close-button").on("click", function () {
        let n = $(this).closest(".popup-panel");
        n.removeClass("visible");
        General.RegisterScroll();
      });
    },
    ToggleMenu: function () {
      $(".menu-items").toggleClass("open");
      $(".triple-menu").toggleClass("open");
      $(".menu-items").hasClass("open") &&
        $(".menu-items a:nth-of-type(1)").focus();
    },
    UID: null,
    GetUID: function () {
      if (this.UID == null) {
        let t = window.location.pathname,
          n = UUIDReg.exec(t);
        if (n != null) return n[1];
      }
      return UID;
    },
    GetBaseURL: function () {
      return "/resnexus/reservations/book/" + this.GetUID() + "/";
    },
    IsValidNumber: function (n) {
      var t = !0;
      return $.isNumeric(n) ? isNaN(n) && (t = !1) : (t = !1), t;
    },
    RemoveNaNFromString: function (n) {
      return n.replace(/\D/g, "");
    },
    RemoveProcessedQueryStringParams: function (n) {
      return (
        n &&
          (n.delete("startdate"),
          n.delete("enddate"),
          n.delete("adults"),
          n.delete("nights"),
          n.delete("capacity2"),
          n.delete("capacity3"),
          n.delete("capacity4"),
          n.delete("capacity5"),
          n.delete("capacity6"),
          n.delete("roomclass"),
          n.delete("packageid"),
          n.delete("bookroomid"),
          n.delete("numguests"),
          n.delete("resetfilters")),
        n
      );
    },
  },
  TextInputs = {
    Initialize: function () {
      $(document).on(
        "change",
        ".text-input-animated input, .text-input-animated textarea",
        function () {
          $(this).val().length == 0
            ? $(this).removeClass("populated")
            : $(this).addClass("populated");
        }
      );
      $(document).on(
        "blur",
        ".text-input-animated input, .text-input-animated textarea",
        function () {
          $(this).trigger("change");
        }
      );
      $(".text-input-animated input, .text-input-animated textarea").trigger(
        "change"
      );
    },
  },
  AJAX_CALLS_IN_PROGRESS = 0;
const CALL_IN_PROGRESS = "Error: Ajax call already in progress.";
$(document).ready(function () {
  TextInputs.Initialize();
  General.InitializeMenu();
  General.InitializePopupPanels();
  RegisterStopTransitionEffectsOnResize();
});
areCookiesEnabled() ||
  $(location).attr("href", "/resnexus/reservations/Error/nocookies");
PopupMsg = (function () {
  function i(t, i) {
    i == null && (i = 5e3);
    n(t, i, "popupSuccess");
  }
  function r(t, i) {
    i == null && (i = 5e3);
    n(t, i, "popupError");
  }
  function n(n, i, r) {
    let f = $("#divPopupMsg");
    (f && f.length != 0) ||
      ((f = $('<div id="divPopupMsg"></div>')), $("body").prepend(f));
    for (var u = 0; u < 100; u++)
      if ($("#" + r + u).length == 0) {
        f.append(
          '<table class="' +
            r +
            '" id="' +
            r +
            u +
            '"><tr>\n   <td><div class="' +
            r +
            'Img" /></td>\n   <td>' +
            n +
            '</td>\n   <td class="popupCloseImgContainer">\n      <a href="javascript:void(0)" class="popupCloseImg ' +
            r +
            'CloseImg" />\n   </td>\n</tr></table>'
        );
        $("#" + r + u).fadeIn(300);
        window.setTimeout(function () {
          t(r + u);
        }, i);
        break;
      }
  }
  function t(n) {
    $("#" + n).fadeOut(400, function () {
      $("#" + n).remove();
    });
  }
  return (
    $(document).ready(function () {
      $(document).on("click", ".popupCloseImg", function () {
        t($(this).closest("table")[0].id);
      });
    }),
    { showMsg: i, showError: r }
  );
})();
let Validation = {
  EmailRegex: new RegExp(
    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
  ),
  PhoneRegex: new RegExp(/^[-+0-9._ ()]+$/),
  PostalRegex: new RegExp(/^[- .0-9a-zA-Z]+$/),
  ValidateInputs: function (n) {
    n == null && (n = document);
    let t = !0;
    return (
      $(n)
        .find("*[validate-type]")
        .each(function () {
          Validation.ValidateSingle($(this)) || (t = !1);
        }),
      t
    );
  },
  ValidateSingle: function (n) {
    let i = n.attr("validate-type"),
      t = !1;
    if ((Validation.Validate[i] != null && (t = Validation.Validate[i](n)), t))
      n.removeClass("invalid"), n.off("blur");
    else {
      n.addClass("invalid");
      n.off("blur").on("blur", function () {
        Validation.ValidateSingle(n);
      });
    }
    return t;
  },
  Validate: {
    text: function (n) {
      return (n.val() == null || n.val().length == 0) &&
        Validation.IsRequired(n)
        ? !1
        : !0;
    },
    email: function (n) {
      return !Validation.IsRequired(n) && Validation.IsEmpty(n)
        ? !0
        : Validation.EmailRegex.test(n.val())
        ? !0
        : !1;
    },
    phone: function (n) {
      return !Validation.IsRequired(n) && Validation.IsEmpty(n)
        ? !0
        : Validation.PhoneRegex.test(n.val())
        ? !0
        : !1;
    },
    postal: function (n) {
      return !Validation.IsRequired(n) && Validation.IsEmpty(n)
        ? !0
        : n.val() == null ||
          n.val().trim().length == 0 ||
          !Validation.PostalRegex.test(n.val())
        ? !1
        : !0;
    },
    dropdown: function (n) {
      return n.val() === undefined
        ? !1
        : Validation.IsRequired(n) && n.val() == "0"
        ? !1
        : !0;
    },
    expiration: function (n) {
      if (!Validation.IsRequired(n) && Validation.IsEmpty(n)) return !0;
      let t = new RegExp("^s*(0?[1-9]|1[012])[-/](20)?[0-9]{2}s*$");
      return t.test(n.val());
    },
    checkbox: function (n) {
      return Validation.IsRequired(n) ? (n.is(":checked") ? !0 : !1) : !0;
    },
    CVV: function (n) {
      if (!Validation.IsRequired(n) && Validation.IsEmpty(n)) return !0;
      let t = new RegExp("^s*[0-9]{3,4}s*$");
      return t.test(n.val());
    },
    CreditCard: function (n) {
      if (!Validation.IsRequired(n) && Validation.IsEmpty(n)) return !0;
      let t = new RegExp("^[-. 0-9]{8,30}$");
      return t.test(n.val());
    },
  },
  IsEmpty: function (n) {
    return n.val() == null || n.val().trim().length == 0 ? !0 : !1;
  },
  IsRequired: function (n) {
    return n.attr("required") != null ? !0 : !1;
  },
};
AutoCompleteTextbox.listenerOnWindow = !1;
AutoCompleteTextbox.statesForCountry = {};
AutoCompleteTextbox.prototype.Initialize = function () {
  this.$txt.parent().append(this.BuildHTML());
  this.$txt.off("keydown").on("keydown", (n) => {
    if (this.$selection != null)
      switch (n.key) {
        case "Tab":
          this.$selection != null &&
            this.$container.hasClass("visible") &&
            n.preventDefault();
          break;
        case "ArrowDown":
          n.preventDefault();
          let t = this.$selection.nextAll("div:not(.hidden)");
          t.length < 1 &&
            (t = this.$container.children("div:not(.hidden)").first());
          this.$selection.removeClass("selected");
          this.$selection = t.first();
          this.$selection.addClass("selected");
          this.ScrollToSelection();
          break;
        case "ArrowUp":
          n.preventDefault();
          let i = this.$selection.prevAll("div:not(.hidden)");
          i.length < 1 &&
            (i = this.$container.children("div:not(.hidden)").last());
          this.$selection.removeClass("selected");
          this.$selection = i.first();
          this.$selection.addClass("selected");
          this.ScrollToSelection();
      }
  });
  this.$txt.off("keyup").on("keyup", (n) => {
    if (
      (clearTimeout(this.timeout), n.key != "ArrowUp" && n.key != "ArrowDown")
    ) {
      if (
        (this.$container.addClass("visible"),
        n.key == "Tab" || n.key == "Enter")
      ) {
        let n = this.$selection;
        n != null && n.length > 0 && this.$txt.val(n.text());
        this.$container.removeClass("visible");
        return;
      }
      this.timeout = setTimeout(() => this.RunSearch(), 200);
    }
  });
  let n = this;
  this.$container
    .find("div")
    .off("click")
    .on("click", function () {
      clearTimeout(n.blurTimeout);
      n.$txt.val($(this).text());
      n.$selection = $(this);
      n.$txt.trigger("change");
    });
  this.$txt.on("blur", function () {
    n.blurTimeout = setTimeout(() => n.$container.removeClass("visible"), 200);
  });
  if (this.isCountry && this.$state != null) {
    this.$txt.on("blur", function () {
      if (n.$selection != null) {
        let t = n.$selection.data("id");
        n.LoadStatesForCountry(t);
      } else new AutoCompleteTextbox(n.$state, null);
    });
    let t = 1;
    this.$txt.val().length > 0 &&
      (this.RunSearch(),
      this.$selection != null && (t = this.$selection.data("id")));
    this.LoadStatesForCountry(t);
  }
  if (!AutoCompleteTextbox.listenerOnWindow) {
    $(window).on("click", () =>
      $(".text-input-animated div.autocomplete-data.visible").removeClass(
        "visible"
      )
    );
    AutoCompleteTextbox.listenerOnWindow = !0;
  }
};
AutoCompleteTextbox.prototype.LoadStatesForCountry = function (n) {
  let t = this;
  AutoCompleteTextbox.statesForCountry[n] == null
    ? Ajax({
        url: "AutocompleteStates",
        data: { countryID: n },
        noLoadingSpinner: !0,
        ignoreCallInProgress: !0,
      }).done(function (i) {
        i.states != null &&
          i.states.length > 0 &&
          (AutoCompleteTextbox.statesForCountry[n] = i.states);
        new AutoCompleteTextbox(t.$state, i.states);
      })
    : new AutoCompleteTextbox(
        this.$state,
        AutoCompleteTextbox.statesForCountry[n]
      );
};
AutoCompleteTextbox.prototype.ScrollToSelection = function () {
  let n = this.$selection.position(),
    t = this.$selection.outerHeight(),
    i = this.$container.outerHeight();
  if (n.top > i - t || n.top < 0) {
    let u = this.$container.scrollTop(),
      r = u + n.top;
    n.top > 0 && (r -= i - t);
    this.$container.scrollTop(r);
  }
};
AutoCompleteTextbox.prototype.RunSearch = function () {
  let t = this.$txt.val().toLowerCase();
  this.matches = 0;
  this.$selection = null;
  $(this.elements).removeClass("selected");
  let n = this;
  $(this.elements).each(function () {
    $(this).text().toLowerCase().indexOf(t.toLowerCase()) >= 0
      ? ($(this).removeClass("hidden"),
        (n.matches += 1),
        n.matches == 1 &&
          ($(this).addClass("selected"), (n.$selection = $(this))))
      : $(this).addClass("hidden");
  });
};
AutoCompleteTextbox.prototype.BuildHTML = function () {
  let n = document.createElement("div");
  n.classList.add("autocomplete-data");
  this.$container = $(n);
  for (let t in this.data) {
    let i = document.createElement("div");
    i.innerText = this.data[t];
    i.setAttribute("data-id", t);
    n.appendChild(i);
    this.elements.push(i);
  }
  return n;
};
ExpirationDatePicker.prototype.ShowMonth = function () {
  this.open = !0;
  this.$month.addClass("visible");
  this.$year.removeClass("visible");
};
ExpirationDatePicker.prototype.ShowYear = function () {
  this.open = !0;
  this.$month.removeClass("visible");
  this.$year.addClass("visible");
};
ExpirationDatePicker.prototype.Close = function () {
  this.open = !1;
  this.$month.removeClass("visible");
  this.$year.removeClass("visible");
};
$(window).on("unload", function () {});
BOOK_PATH = "/resnexus/reservations/Book/";
let updateSearchParams = new CustomEvent("updateSearchParams", {
    detail: { params: new URLSearchParams() },
  }),
  searchParamsUpdated = new CustomEvent("searchParamsUpdated", {
    detail: { params: null },
  });
BookGen6 = {
  RetailDeliveryDateCal: null,
  Search: function (n, t) {
    let i = !1;
    if (
      (n ? (i = !0) : (n = BookGen6.GetURLParams()),
      window.addAmenitySearchUrlParams && window.addAmenitySearchUrlParams(n),
      window.isMissingRequiredAmenitySearchOptions &&
        isMissingRequiredAmenitySearchOptions())
    ) {
      PopupMsg.showError(
        "Please make sure to select any required options before searching."
      );
      return;
    }
    return (
      i &&
        ((searchParamsUpdated.detail.params = n),
        document.dispatchEvent(searchParamsUpdated)),
      $(".guest-filter").removeClass("invalid"),
      Ajax({ type: "GET", url: "Search?" + n }).done(() => {
        BookGen6.AdditionalRoomDetailsLoaded() &&
          BookGen6.LoadRoomDetails(
            window.history.state.ID,
            window.history.state.classID
          ),
          t &&
            (IS_DESKTOP ||
              $(".searchResultsContainer")[0].scrollIntoView({
                behavior: "smooth",
              }));
      })
    );
  },
  SearchListingsForPackage: function (n, t) {
    let i = !1;
    if (
      (t ? (i = !0) : (t = BookGen6.GetURLParams()),
      window.addAmenitySearchUrlParams && window.addAmenitySearchUrlParams(t),
      window.isMissingRequiredAmenitySearchOptions &&
        isMissingRequiredAmenitySearchOptions())
    ) {
      PopupMsg.showError(
        "Please make sure to select any required options before searching."
      );
      return;
    }
    i &&
      ((searchParamsUpdated.detail.params = t),
      document.dispatchEvent(searchParamsUpdated));
    Ajax({
      type: "GET",
      url: "SearchListingsForPackage?packageID=" + n + "&" + t,
    });
  },
  GetURLParams: function () {
    return (
      document.dispatchEvent(updateSearchParams),
      (searchParamsUpdated.detail.params = updateSearchParams.detail.params),
      document.dispatchEvent(searchParamsUpdated),
      updateSearchParams.detail.params
    );
  },
  InitializeSearchButton: function () {
    $("button.search-button").on("click", function () {
      BookGen6.Search(null, !0);
    });
  },
  InitializeShowMoreButton: function () {
    $(".searchResultsContainer").on("click", ".showMoreButton", function () {
      let n = $(this),
        t = n.data("next-page");
      Ajax({ url: "ShowMore", data: { nextPage: t } });
    });
  },
  InitializeMaps: function () {
    $(document).ready(function () {
      $(".zoom-box").each(function () {
        function i() {
          let t = new ZoomBox(n);
          // t.AddClickListener("div.outerBox", function () {
          // });
        }
        let n = $(this),
          t = n.find("#MapImage");
        t[0].complete ? i() : (t[0].onload = i);
      });
    });
  },
  InitializeCollapsibleContainers: function () {
    $("body").on(
      "click",
      ".collapsible-container .collapse-button",
      function () {
        let n = $(this).closest(".collapsible-container"),
          t = n.children(".collapsible-content"),
          i = $(this).hasClass("hide-details");
        i
          ? (t.slideUp(),
            n.find(".hide-details").hide(),
            n.find(".show-details").show(),
            sessionStorage.setItem("collapsedDetails", "true"))
          : (t.slideDown(),
            n.find(".hide-details").show(),
            n.find(".show-details").hide(),
            sessionStorage.removeItem("collapsedDetails"));
      }
    );
  },
  InitializeWorryFreeBookings: function () {
    $("body").on("change", "#EnableWorryFreeBooking", function () {
      let n = $(this).closest(".collapsible-container"),
        t = $(this).is(":checked");
      Ajax({
        url: "UpdateWorryFreeBookingEnabled",
        data: { isEnabled: t },
      }).done(function () {
        t ? n.addClass("disabled") : n.removeClass("disabled");
      });
    });
  },
  InitializeCustomSelect: function () {
    function n(n) {
      var t = n.prev("select").find("option:selected").text(),
        i;
      t != null &&
        ((i = n.find(".select-title").first()),
        i.length > 0
          ? i.text(t)
          : n.prepend('<div class="select-title">' + t + "</div>"));
    }
    $("select.rn-select").each(function () {
      var t = document.createElement("div");
      t.classList.add("rn-select");
      t.setAttribute("aria-hidden", "true");
      t.innerHTML = '<span class="fa">&#xf078;</span>';
      $(this).after(t);
      n($(t));
    });
    $("select.rn-select").on("change", function () {
      var t = $(this).next("div.rn-select");
      n(t);
    });
  },
  SetRoomRate: function (n) {
    var t = n.closest(".room-rates-dropdown").children(".rate");
    t.find(".rate-name").html(n.find(".rate-name").html());
    t.find(".rate-price-per-night").html(
      n.find(".rate-price-per-night").html()
    );
    t.find(".rate-price-total").html(n.find(".rate-price-total").html());
  },
  InitializePackageCards: function () {
    $(
      ".package-details a, .package-card .image-gallery, .package-card .room-name, .packageWizardStepContainer .packageRequirementLink, .sidebar-section .package-link"
    )
      .off("click")
      .on("click", function (n) {
        n.preventDefault();
        let t = $(this).data("id");
        if (!t) {
          let n = $(this).closest(".package-card");
          t = n.data("id");
        }
        BookGen6.LoadPackageInfoPopup(t);
      });
  },
  InitializeRoomCards: function () {
    RoomGallery.InitializeItemCardGallery();
    $("#ListingDetails-panel")
      .off("click", ".room-card div.back-to-results button")
      .on("click", ".room-card div.back-to-results button", function () {
        window.history.back();
      });
    $(
      ".room-details a, .room-gallery .images img, .room-card .card-content .room-name"
    )
      .off(".click")
      .on("click", function (n) {
        n.preventDefault();
        let r = $(this).closest(".room-card"),
          f = r.data("id"),
          t = r.data("class");
        t == "" && (t = null);
        let i = $("#PackageID"),
          u = null;
        i && i.length > 0 && (u = i.val());
        BookGen6.LoadRoomDetails(f, t, u);
      });
    $("body")
      .off("keypress", ".room-rates-dropdown")
      .on("keypress", ".room-rates-dropdown", function (n) {
        (n.key == "Enter" || n.key == " ") &&
          ($(this).find(".more-rates").slideToggle(),
          $(this).find(".more-rates input[type=radio]:checked").focus());
      })
      .off("click", ".room-rates-dropdown")
      .on("click", ".room-rates-dropdown", function () {
        $(this).find(".more-rates").slideToggle();
      });
    $("body")
      .off("click", ".room-rates-dropdown .more-rates label.rate")
      .on("click", ".room-rates-dropdown .more-rates label.rate", function () {
        BookGen6.SetRoomRate($(this));
      });
    $("body")
      .off("keypress", ".room-rates-dropdown .more-rates input[type=radio]")
      .on(
        "keypress",
        ".room-rates-dropdown .more-rates input[type=radio]",
        function (n) {
          n.stopPropagation();
          (n.key == " " || n.key == "Enter") &&
            (n.preventDefault(),
            $(this).closest(".more-rates").slideToggle(),
            BookGen6.SetRoomRate($(this).next("label.rate")),
            $(this).blur());
        }
      );
    $("body")
      .off("click", ".room-rates-dropdown .more-rates input[type=radio]")
      .on(
        "click",
        ".room-rates-dropdown .more-rates input[type=radio]",
        function (n) {
          n.stopPropagation();
        }
      );
    $(".room-rates-dropdown del").attr("aria-hidden", !0);
  },
  UnregisterRoomDetailsSearch: null,
  InitializeAdditionalRoomDetails: function (n, t) {
    RoomGallery.InitializeRoomDetailsGallery();
    let i = new CalendarWidget($("#ListingDetails-panel .date-filter"), n, t),
      r = new MiniCalendar($("#ListingDetails-panel .mini-calendar"), {
        calWidget: i,
        reservableID: n,
        classID: t,
      });
    window.roomCalendar = i;
    let u = new GuestsFilter($("#ListingDetails-panel .guest-filter"));
    BookGen6.UnregisterRoomDetailsSearch = function () {
      r.UnregisterSearchEvent();
      i.UnregisterSearchEvent();
      u.UnregisterSearchFunc();
    };
    BookGen6.InitializeReservationInfoBarForDetails();
    BookGen6.ShowReservationInfoBar(null, !0);
  },
  HideCart: function () {
    $(".cart-view").removeClass("visible");
    General.RegisterScroll();
  },
  InitializeCart: function () {
    $("body").on(
      "click",
      ".mainSearchPage .cart-view .checkout-header-bar .close-button",
      function () {
        BookGen6.HideCart();
      }
    );
    $("body").on(
      "click",
      ".reservation-info-bar .package-requirement-error, button.view-cart",
      function () {
        BookGen6.RefreshCart();
        $(".cart-view").addClass("visible");
        General.UnregisterScroll();
      }
    );
    $("body").on("click", ".start-over", function () {
      sessionStorage.removeItem("booking-hide-slideshow");
      Ajax({ url: "StartOver" }).done(function () {
        window.location.href =
          "/resnexus/reservations/book/" + General.GetUID();
      });
    });
    $("body").on("change", ".cart-item .item-quantity", function () {
      $(this)
        .closest(".cart-item-quantity")
        .find(".updateQuantityButton")
        .show();
    });
  },
  InitializeReservationInfoBarForDetails: function () {
    $(".reservation-info-bar .reservation-buttons").addClass("listingDetails");
    $(
      ".reservation-info-bar .reservation-buttons > button:not(.back-button)"
    ).hide();
    var n,
      t = $("#ListingDetails-panel .reservable-status");
    t.length > 0 && (n = [0].outerHTML);
    $(".reservation-info-bar .additionalButtons").html(n);
    $(".reservation-info-bar .back-button")
      .show()
      .off("click")
      .on("click", function () {
        window.history.back();
      });
  },
  ResetReservationInfoBarButtons: function () {
    $(".reservation-info-bar .reservation-buttons > button").show();
    $(".reservation-info-bar .additionalButtons").html("");
    $(".reservation-info-bar .reservation-buttons").removeClass(
      "listingDetails"
    );
    $(".reservation-info-bar .back-button").hide().off("click");
  },
  ShowReservationInfoBar: function (n) {
    let t = $(".reservation-info-bar");
    (!t.hasClass("visible") || n) &&
      (t.hasClass("preloaded") && t.removeClass("preloaded"),
      t.addClass("visible"));
    t.is(":visible") && BookGen6.AddClassToUserwayWidget();
  },
  AddClassToUserwayWidget: function () {
    window.userWayRetryCount = 0;
    let n = document.querySelector(".uwy");
    n != null
      ? document
          .querySelectorAll(".uwy.userway_p3, .uwy.userway_p4, .uwy.userway_p5")
          .forEach((n) => n.classList.add("res-bar-visible"))
      : ((window.userWayRetryCount += 1),
        window.userWayRetryCount < 100 &&
          setTimeout(BookGen6.AddClassToUserwayWidget, 100));
  },
  HideReservationInfoBar: function () {
    let n = $(".reservation-info-bar .reservation-images img");
    (n && n.length != 0) ||
      ($(".reservation-info-bar").removeClass("visible"),
      $(".uwy.userway_p3, .uwy.userway_p4, .uwy.userway_p5").removeClass(
        "res-bar-visible"
      ));
  },
  RefreshCart: function () {},
  LoadRoomDetails: function (n, t, i, r) {
    BookGen6.UnregisterRoomDetailsSearch != null &&
      BookGen6.UnregisterRoomDetailsSearch();
    Ajax({
      url: "RoomDetails",
      type: "GET",
      data: { id: n, classID: t, packageID: i, availExID: r },
    }).done(function (i) {
      i &&
        i.length &&
        ($("#ListingDetails-panel .detailsContainer").html(i),
        BookGen6.ShowAdditionalRoomDetails(n, t));
    });
  },
  AdditionalRoomDetailsLoaded: function () {
    let n = window.history.state;
    return n != null && n.additionalDetails == !0;
  },
  ShowAdditionalRoomDetails: function (n, t) {
    $("#ListingDetails-panel").addClass("visible");
    let i = { additionalDetails: !0 };
    n && (i.ID = n);
    t && (i.classID = t);
    let r = getRateTypeID($("#ListingDetails-panel .room-card")[0]),
      u = $("#ListingDetails-panel").find(
        '.room-rates-dropdown label.rate[for*="rate' + r + '"]'
      );
    BookGen6.SetRoomRate(u);
    $(window).on("popstate", BookGen6.HideOnPop);
    BookGen6.AdditionalRoomDetailsLoaded()
      ? window.history.replaceState(i, null)
      : window.history.pushState(i, null);
    BookGen6.InitializeAdditionalRoomDetails(n, t);
    $(document).on("updateSearchParams", BookGen6.AddUrlParams);
    document
      .querySelector("#ListingDetails-panel")
      .scroll({ top: 0, behavior: "smooth" });
    General.UnregisterScroll();
    General.DisableBodyScroll();
  },
  HideAdditionalRoomDetails: function () {
    $(window).off("popstate", BookGen6.HideOnPop);
    $(document).off("updateSearchParams", BookGen6.AddUrlParams);
    $("#ListingDetails-panel").removeClass("visible");
    BookGen6.HideReservationInfoBar();
    BookGen6.ResetReservationInfoBarButtons();
    BookGen6.UnregisterRoomDetailsSearch();
    General.RegisterScroll();
    General.EnableBodyScroll();
    window.roomCalendar = null;
  },
  HideOnPop: function () {
    let n = window.history.state;
    (n && n.additionalDetails) || BookGen6.HideAdditionalRoomDetails();
  },
  InitializeRetailAdditionalInfoPopup: function () {
    $("#RetailBookInfo-popup .close-button").on("click", function () {
      $("#RetailBookInfo-popup").removeClass("visible");
      General.EnableBodyScroll();
    });
    RoomGallery.InitializeItemCardGallery(
      $("#RetailBookInfo-popup .reservable-card")
    );
    BookGen6.RetailDeliveryDateCal = null;
    let n = $("#RetailBookInfo-popup .retail-delivery-date .mini-calendar");
    n.length > 0 &&
      (BookGen6.RetailDeliveryDateCal = new MiniCalendar(n, {
        hideLegend: !0,
      }));
    General.DisableBodyScroll();
  },
  LoadRetailAdditionalInfoPopup: function (n) {
    Ajax({ url: "RetailBookInfoPopup", type: "GET", data: { id: n } }).done(
      function (n) {
        n &&
          n.length &&
          ($("#RetailBookInfo-popup .detailsContainer").html(n),
          $("#RetailBookInfo-popup").addClass("visible"),
          BookGen6.InitializeRetailAdditionalInfoPopup());
      }
    );
  },
  InitializePackageInfoPopup: function () {
    $("#PackageInfo-popup .close-button").on("click", function () {
      $("#PackageInfo-popup").removeClass("visible");
      General.EnableBodyScroll();
    });
    RoomGallery.InitializeItemCardGallery(
      $("#PackageInfo-popup .reservable-card")
    );
    General.DisableBodyScroll();
  },
  LoadPackageInfoPopup: function (n) {
    Ajax({ url: "PackageInfoPopup", type: "GET", data: { id: n } }).done(
      function (n) {
        n && n.length
          ? ($("#PackageInfo-popup .detailsContainer").html(n),
            $("#PackageInfo-popup").addClass("visible"),
            BookGen6.InitializePackageInfoPopup())
          : location.reload();
      }
    );
  },
  AddUrlParams: function (n) {
    n.detail.params.set("unit", window.history.state.ID);
  },
  NewReservation: function () {
    Ajax({ url: "NewReservation", type: "POST" }).done((n) => {
      n.url != null && (window.location.href = n.url);
    });
  },
  InitializeAvailabilityPopup: function () {
    $(".availability-popup-panel .availability-close-button").on(
      "click",
      function () {
        $(this).closest(".availability-popup-panel").removeClass("visible");
      }
    );
    $(".availability-popup-panel").on(
      "click",
      "div.date-grid > div:not(.disabled)",
      function () {
        $(this).closest(".availability-popup-panel").removeClass("visible");
      }
    );
  },
  ShowAvailabilityPopup: function (n, t, i) {
    let f = $('.searchResultsContainer .room-card[data-id="' + n + '"]')
      .find(".room-name")
      .text();
    $(".availability-popup-panel .room-name").text(f);
    let u = $(".availability-popup-panel .mini-calendar"),
      r = 1;
    if ((IS_TABLET && (r = 2), IS_DESKTOP && (r = 3), u.length > 0)) {
      let o = new MiniCalendar(u, {
          hideLegend: !0,
          reservableID: n,
          classID: t,
          monthsToShow: r,
          calWidget: i,
          threeMonthPopup: !0,
        }),
        f = $(".availability-popup-panel .close-button");
      function e() {
        f.off("click", e);
        o.UnregisterSearchEvent();
      }
      f.on("click", e);
    }
    $(".availability-popup-panel").addClass("visible");
  },
  ShowRoomAvailability: function (n, t) {
    window.roomCalendar != null
      ? BookGen6.ShowAvailabilityPopup(n, t, window.roomCalendar)
      : BookGen6.ShowAvailabilityPopup(n, t, window.searchPageWidget);
  },
  ApplyPromoCode: function () {
    let n = $("#PromoCode").val();
    n != null &&
      n.length != 0 &&
      Ajax({ url: "AddPromoCode", data: { newPromoCode: { PromoCode: n } } });
  },
};
RoomGallery = {
  InitializeItemCardGallery: function (n) {
    let t = $(".reservable-card");
    n && (t = n);
    t.find(".image-gallery").each(function () {
      var t = $(this).find(".images img"),
        n;
      if (t.length <= 1) {
        $(this).find(".image-bar, .slider-controls").hide();
        return;
      }
      let r = $(this).closest(".retail-card").length > 0,
        u = $(this).closest(".popup-container").length == 0;
      r && u && $(this).find(".image-bar").hide();
      let i = $(this).find(".image-bar-internal");
      (i && i.length != 0) ||
        ((n = document.createElement("div")),
        n.classList.add("image-bar-internal"),
        t.each(function () {
          $(n).append(this.outerHTML);
        }),
        $(n).find("img").first().addClass("selected"),
        $(this).find(".image-bar").append(n));
    });
    t.find(".image-gallery img").on("click", function () {
      $(this).hasClass("selected") || RoomGallery.SetImage($(this));
    });
    t.find(".image-gallery .slider-controls").on("click", function () {
      RoomGallery.SliderImageChange($(this));
    });
    t.find(".images").on("touchstart", function (n) {
      $(this).css("overflow-x", "auto");
      RoomGallery.touchStart =
        n.changedTouches.length == 1 ? n.changedTouches[0] : null;
    });
    t.find(".images").on("touchend", function (n) {
      var t, i, r, u, f;
      RoomGallery.touchStart != null &&
        ((t = n.changedTouches[0].clientX - RoomGallery.touchStart.clientX),
        (i = !0),
        Math.abs(t) < 80 && (i = !1),
        $(this)
          .find("img")
          .each(function () {
            var n = $(this).position().left;
            (i && ((t > 0 && n > 0) || (t < 0 && n < 0))) ||
              ((n = Math.abs(n)),
              (r == null || n < r) && ((u = $(this).attr("src")), (r = n)));
          }),
        (f = $(this)
          .closest(".image-gallery")
          .find('.image-bar img[src="' + u + '"]')),
        RoomGallery.SetImage(f, !0));
    });
  },
  InitializeRoomDetailsGallery: function () {
    $("#ListingDetails-panel .room-card .room-gallery").each(function () {
      var t = $(this).find(".images img"),
        n = document.createElement("div");
      n.classList.add("image-bar-internal");
      t.each(function () {
        $(n).append(this.outerHTML);
      });
      $(n).find("img").first().addClass("selected");
      $(this).find(".image-bar").append(n);
    });
    $("#ListingDetails-panel .room-card .room-gallery .image-bar img").on(
      "click",
      function () {
        $(this).hasClass("selected") || RoomGallery.SetImage($(this));
      }
    );
    $("#ListingDetails-panel .room-card .room-gallery .slider-controls").on(
      "click",
      function () {
        RoomGallery.SliderImageChange($(this));
      }
    );
    $("#ListingDetails-panel .images").on("touchstart", function (n) {
      $(this).css("overflow-x", "auto");
      RoomGallery.touchStart =
        n.changedTouches.length == 1 ? n.changedTouches[0] : null;
    });
    $("#ListingDetails-panel .images").on("touchend", function (n) {
      var t, i, r, u, f;
      RoomGallery.touchStart != null &&
        ((t = n.changedTouches[0].clientX - RoomGallery.touchStart.clientX),
        (i = !0),
        Math.abs(t) < 80 && (i = !1),
        $(this)
          .find("img")
          .each(function () {
            var n = $(this).position().left;
            (i && ((t > 0 && n > 0) || (t < 0 && n < 0))) ||
              ((n = Math.abs(n)),
              (r == null || n < r) && ((u = $(this).attr("src")), (r = n)));
          }),
        (f = $(this)
          .closest(".image-gallery")
          .find('.image-bar img[src="' + u + '"]')),
        RoomGallery.SetImage(f, !0));
    });
  },
  SetImage: function (n, t) {
    var u;
    t == null && (t = !1);
    n.parent().find("img.selected").removeClass("selected");
    var f = n.attr("src"),
      i = n.closest(".image-gallery").find(".images"),
      r = i.find('img[src="' + f + '"]');
    r.length != 0 &&
      ((u = i.scrollLeft() + r.position().left),
      t && i.css("overflow-x", "hidden"),
      i.animate({ scrollLeft: u }, 500),
      n.addClass("selected"),
      t &&
        setTimeout(function () {
          i.css("overflow-x", "auto");
        }, 500));
  },
  SliderImageChange: function (n) {
    let r = $(n),
      u = r.closest(".image-gallery"),
      i = u.find(".image-bar img.selected"),
      t = null;
    if (r.hasClass("image-slider-left")) {
      let n = i.prev();
      if (n && n.length > 0) t = n;
      else {
        let r = i.closest(".image-bar-internal"),
          n = r.find("img:last-of-type");
        n.hasClass("selected") || (t = n);
      }
    } else if (r.hasClass("image-slider-right")) {
      let n = i.next();
      if (n && n.length > 0) t = n;
      else {
        let r = i.closest(".image-bar-internal"),
          n = r.find("img:first-of-type");
        n.hasClass("selected") || (t = n);
      }
    }
    t && RoomGallery.SetImage(t);
  },
};
$(document).ready(function () {
  BookGen6.InitializeCustomSelect();
  BookGen6.InitializeSearchButton();
  BookGen6.InitializeShowMoreButton();
  BookGen6.InitializeRoomCards();
  BookGen6.InitializePackageCards();
  BookGen6.InitializeCart();
  BookGen6.InitializeAvailabilityPopup();
  BookGen6.InitializeMaps();
  BookGen6.InitializeCollapsibleContainers();
  BookGen6.InitializeWorryFreeBookings();
  let t = $(".reservation-info-bar");
  t.hasClass("preloaded") && BookGen6.ShowReservationInfoBar();
  let n = window.history.state;
  if (n && n.additionalDetails) {
    let i = n.ID,
      r = n.classID,
      u = n.availExID;
    window.history.replaceState(null, null);
    let t = $(".packageWizard");
    (t && t.length != 0) || BookGen6.LoadRoomDetails(i, r, u);
  }
  $("#BookingTabsMobileDropdown").on("change", function () {
    let n = $(this).val();
    window.location.href = n;
  });
  $("body").on("click", ".cart-view button.apply-promo", function () {
    BookGen6.ApplyPromoCode();
  });
  $("body").on("keypress", ".cart-view #PromoCode", function (n) {
    n.key == "Enter" && BookGen6.ApplyPromoCode();
  });
  $("body").on("click", ".class-filter-option", function () {
    let n = $(this).data("id");
    Ajax({ url: "FilterByClass", data: { classID: n } }).then(() => {
      document
        .querySelector(".searchResultsContainer")
        .scrollIntoView({ behavior: "smooth" });
    });
  });
  $("#Currency").on("change", function () {
    let t = $(this).val(),
      n = new URLSearchParams(window.location.search);
    n.set("currency", t);
    window.location.search = n.toString();
  });
  $("#Languages").on("change", function () {
    let t = $(this).val(),
      n = new URLSearchParams(window.location.search);
    n.set("lang", t);
    window.location.search = n.toString();
  });
});
window.BookRoom = function (n, t) {
  let i = getRateTypeID(t);
  Ajax({ url: "BookRoom", data: { id: n, rateID: i } }).done(function () {
    let n = window.history.state;
    n && n.additionalDetails && window.history.back();
  });
};
window.BookRoomForPackage = function (n, t, i, r) {
  let u = getRateTypeID(r);
  Ajax({
    url: "BookRoomForPackage" + (i ? "?" + BookGen6.GetURLParams() : ""),
    data: { id: n, packageID: t, extendStay: i ? !0 : !1, rateTypeID: u },
  }).done(function (n) {
    if (n && n.redirectUrl) {
      let t = window.history.state;
      t && t.additionalDetails && BookGen6.HideAdditionalRoomDetails();
      window.location.href = n.redirectUrl;
    }
  });
};
window.CancelRoom = function (n, t, i, r) {
  return (
    r == null && (r = 0),
    Ajax({
      url: "CancelRoom",
      data: { id: n, startDate: t, nights: i, tabID: r },
    })
  );
};
window.JoinWaitlist = function (n, t) {
  let i = getRateTypeID(t);
  Ajax({ url: "JoinWaitlist", data: { id: n, rateID: i } });
};
window.BookRetailItem = function (n, t, i) {
  Ajax({ url: "BookRetailItem", data: { id: n, quantity: t, deliverOn: i } });
};
window.BookRetailItemAdditionalInfo = function (n) {
  let t = null,
    i = null,
    r = $("#RetailBookInfo-popup .item-quantity");
  r.length > 0 && (t = r.val());
  BookGen6.RetailDeliveryDateCal &&
    (i = BookGen6.RetailDeliveryDateCal.selectedDate.toDateString());
  BookRetailItem(n, t, i);
  $("#RetailBookInfo-popup .close-button").click();
};
window.UpdateRetailItemQuantity = function (n, t, i) {
  let r = 1;
  n && (r = $(n).closest(".cart-item-quantity").find(".item-quantity").val());
  Ajax({
    url: "UpdateRetailItemQuantity",
    data: { id: t, newQuantity: r, deliverOn: i },
  });
};
window.CancelRetailItem = function (n, t) {
  Ajax({ url: "CancelRetailItem", data: { id: n, deliverOn: t } });
};
window.BookPackage = function (n) {
  Ajax({ url: "BookPackage", data: { id: n } }).done(function (n) {
    $("#PackageInfo-popup .close-button").click();
    n && n.redirectUrl && (window.location.href = n.redirectUrl);
  });
};
window.CancelPackage = function (n) {
  Ajax({ url: "CancelPackage", data: { id: n } });
};
window.CancelGiftCertificate = function (n) {
  Ajax({ url: "CancelGiftCertificate", data: { id: n } });
};
window.BookUniqueGiftCertificate = function (n) {
  let i = $("#CertificateForm-popup input[name=SendMode]:checked").val();
  if (
    ($("#CertificateForm-popup .mail-inputs input").prop(
      "required",
      i == "mail"
    ),
    Validation.ValidateInputs($("#CertificateForm-popup form")))
  ) {
    let r = $("#FNamePopup").val(),
      u = $("#SendAnonymouslyPopup").is(":checked"),
      f = $("#RNamePopup").val(),
      e = $("#REmailPopup").val(),
      o = $("#GCNotePopup").val(),
      t = {
        newGiftCertificate: {
          ID: n,
          FromName: r,
          SendAnonymously: u,
          ToName: f,
          ToEmail: e,
          Note: o,
        },
      };
    if (i == "mail") {
      let n = $("#RAddressPopup").val(),
        i = $("#RCityPopup").val(),
        r = $("#RStatePopup").val(),
        u = $("#RPostalPopup").val(),
        f = $("#RCountryPopup").val();
      t.newGiftCertificate.Address = n;
      t.newGiftCertificate.City = i;
      t.newGiftCertificate.State = r;
      t.newGiftCertificate.Postal = u;
      t.newGiftCertificate.Country = f;
    }
    Ajax({ url: "BookUniqueGiftCertificate", data: t }).then((n) => {
      n.cart != null &&
        ($("#CertificateForm-popup form")[0].reset(),
        $("#SendAnonymouslyPopup").trigger("change"));
    });
    $("#CertificateForm-popup .close-button").click();
  }
};
$(document).on(
  "click",
  ".retail-card .retail-name, .retail-card .retail-description",
  function () {
    let n = $(this).closest(".retail-card").data("id");
    ShowRetailPopup(n);
  }
);
const ONE_DAY_IN_MS = 864e5,
  MONTHS_TO_LOAD = 3,
  MORE_MONTHS_TO_LOAD = 3,
  DateRegex = new RegExp(
    /^\s*([0-9]{1,4})[-./\\]([0-9]{1,4})[-./\\]([0-9]{1,4})\s*$/
  ),
  HIDE_DEPARTURE_DATE = $("body").hasClass("hide-depart-date");
$(document).ready(function () {
  let n = $(".ken-burns.kenBurnsSlideshow");
  if (n.length == 0) {
    $(".toggle-slideshow").hide();
    $(".toggle-slideshow + div.divider").hide();
    return;
  }
  sessionStorage.getItem("booking-hide-slideshow") == "true"
    ? hideSlideshow()
    : expandSlideshow();
  $(".toggle-slideshow").on("click", function () {
    $(this).hasClass("hidden") ? expandSlideshow() : hideSlideshow();
  });
  setTimeout(function () {
    $(".ken-burns.kenBurnsSlideshow").addClass("initialized");
  }, 500);
});
$(document).on("searchParamsUpdated", function (n) {
  let t = n.detail.params,
    i = t.get("StartDate"),
    r = t.get("EndDate");
  i != null && $("#StartDate").val(i);
  r != null && $("#EndDate").val(r);
});
class CalendarWidget {
  constructor(n, t, i) {
    this.reservableID = t == null ? "all" : t;
    this.classID = i;
    this.$container = n;
    this.MinDate = null;
    this.MaxDate = null;
    this.MaxNumNights = null;
    this.TextBox = null;
    this.IsOngoing = null;
    this.SavedStart = null;
    this.SavedEnd = null;
    this.WasOngoing = !1;
    this.$Start = n.find("input.start-date");
    this.$End = n.find("input.end-date");
    this.$Nights = n.find(".num-nights-input");
    this.Initialize();
  }
  RegisterSearchEvent() {
    let n = this;
    this.SearchUpdatedFunc = function (t) {
      let i = t.detail.params,
        r = i.get("StartDate"),
        u = i.get("EndDate");
      if (r != null && u != null) {
        let t = new Date(i.get("StartDate")),
          r = new Date(i.get("EndDate"));
        n.SetRange(t, r, !1);
        n.$Nights.val(CalendarWidget.CalculateNumNights(t, r));
      }
    };
    $(document).on("searchParamsUpdated", this.SearchUpdatedFunc);
  }
  UnregisterSearchEvent() {
    $(document).off("searchParamsUpdated", this.SearchUpdatedFunc);
  }
  Initialize() {
    let i = new Date($("#StartDate").val()),
      r = new Date($("#EndDate").val());
    CalendarWidget.SetDate(this.$Start, i);
    CalendarWidget.SetDate(this.$End, r);
    this.$Nights.val(CalendarWidget.CalculateNumNights(i, r));
    let n = this,
      t = this.$container.find(".calendar-widget");
    if (t && t.length != 0) {
      this.MinDate = new Date(t.data("min-date"));
      this.MaxDate = new Date(t.data("max-date"));
      this.MaxNumNights = t.data("max-num-nights");
      this.RegisterSearchEvent();
      let u = t.find(".months-container");
      u.html("");
      var f = CalendarWidget.ParseDate(this.MinDate.getTime());
      for (let n = 0; n < MONTHS_TO_LOAD; n++)
        u.append(CalendarWidget.LoadMonth(f, this.MinDate, this.MaxDate)),
          f.setDate(32);
      this.LoadMoreMonths();
      this.HighlightRange();
      this.$container.find(".ongoing-btn").on("click", function () {
        let i = n.$Start,
          t = n.$End;
        if (n.IsOngoing) {
          n.IsOngoing = !1;
          $(this).removeClass("selected");
          t.attr("disabled", null);
          let r = CalendarWidget.ParseDate(i.data("val"));
          r.setDate(r.getDate() + 1);
          n.SetDate(t, r);
          n.ValidateDates(t);
          n.HighlightRange();
        } else (n.IsOngoing = !0), $(this).addClass("selected"), t.attr("disabled", ""), t.val("Ongoing"), t.removeClass("selected"), i.addClass("selected"), (n.TextBox = i), n.HighlightRange();
      });
      this.$container.find(".num-nights").on("click", () => {
        this.$container.find("input.end-date").click();
      });
      this.$container
        .find("input.start-date, input.end-date")
        .on("focus", function () {
          n.clicking ||
            ($(this).val($(this).data("val")), $(this).addClass("editing"));
          n.clicking = !1;
        });
      this.$container
        .find("input.start-date, input.end-date")
        .on("mousedown", function (t) {
          t.buttons & !0 && (n.clicking = !0);
        });
      this.$container
        .find("input.start-date, input.end-date")
        .on("click", function () {
          n.$container.hasClass("visible") || n.Show();
          $(this).hasClass("selected")
            ? $(this).hasClass("editing") ||
              ($(this).val($(this).data("val")), $(this).addClass("editing"))
            : $(this).blur();
          n.$container
            .find(".date-range-row .selected")
            .removeClass("selected");
          $(this).addClass("selected");
          n.TextBox = $(this);
          n.UpdateAvailableDays($(this).is(".end-date"));
        });
      t.on("click", ".date-grid div.disabled", function () {
        IS_DESKTOP ||
          General.ShowWarningAlert(CalendarResources.UnavailableForBooking);
      });
      t.on("click", ".date-grid div:not(.disabled)", function () {
        var t, f, e, o;
        if ($(this).hasClass("overMax")) {
          let t = CalendarWidget.ParseDate($(this).data("date")),
            i = CalendarWidget.ParseDate(n.$Start.data("val")),
            r = CalendarWidget.CalculateNumNights(i, t);
          if (r > n.MaxNumNights) {
            General.ShowWarningAlert(CalendarResources.BookUpToXDates);
            return;
          }
          General.ShowWarningAlert(CalendarResources.DateBetweenUnavailable);
          return;
        }
        if (((t = n.TextBox), (f = $(this).data("date")), f != null)) {
          let u = CalendarWidget.ParseDate(f),
            i = n.$Start,
            r = n.$End;
          if (HIDE_DEPARTURE_DATE) {
            n.SetStartDateForHiddenDepartMode(u).then(() => {
              n.ValidateDates(t), n.HighlightRange(), n.UpdateAvailableDays();
            });
            return;
          }
          t.hasClass("start-date")
            ? (CalendarWidget.SetDate(t, u),
              i.removeClass("invalid"),
              n.IsOngoing
                ? n.HighlightRange()
                : (r.addClass("selected"),
                  (n.TextBox = r),
                  r.val(""),
                  r.data("val", ""),
                  r.removeClass("invalid"),
                  t.removeClass("selected")))
            : ((e = i.data("val")),
              (o = CalendarWidget.ParseDate(e)),
              u <= o
                ? (CalendarWidget.SetDate(i, u), i.removeClass("invalid"))
                : (CalendarWidget.SetDate(t, u),
                  (n.TextBox = i),
                  i.addClass("selected"),
                  t.removeClass("selected"),
                  n.HighlightRange(),
                  r.removeClass("invalid")));
          n.ValidateDates(t);
          n.HighlightRange();
          n.UpdateAvailableDays();
        }
      });
      t.on("mouseenter", ".date-grid div", function () {
        if (IS_DESKTOP) {
          let t = $(this);
          if (t.hasClass("disabled"))
            n.ShowDateHoverMessage(
              this,
              CalendarResources.UnavailableForBooking
            );
          else if (t.hasClass("overMax")) {
            let i = CalendarWidget.ParseDate(n.$Start.data("val")),
              r = CalendarWidget.CalculateNumNights(
                i,
                CalendarWidget.ParseDate(t.data("date"))
              );
            r < n.MaxNumNights
              ? n.ShowDateHoverMessage(
                  this,
                  CalendarResources.DateBetweenUnavailable
                )
              : n.ShowDateHoverMessage(this, CalendarResources.BookUpToXDates);
          }
        }
      });
      t.on("mouseleave", ".date-grid div", function () {
        n.HideDateHoverMessage();
      });
      this.$container.find(".start-date, .end-date").on("keyup", function (n) {
        n.key == "Enter" && $(this).blur();
      });
      this.$container.find(".start-date, .end-date").on("keydown", function () {
        $(this).addClass("editing");
      });
      const e = new RegExp(/^\d+$/);
      this.$container.find(".num-nights-input").on("keyup", function (n) {
        $(this).val($(this).val().replace(/[^\d]/g, ""));
        n.key == "Enter" && $(this).blur();
      });
      this.$container.find(".num-nights-input").on("blur", function () {
        if (!e.test($(this).val())) {
          PopupMsg.showError(resources.InvalidNumber);
          return;
        }
        let t = parseInt($(this).val());
        t < 1 &&
          (PopupMsg.showError(resources.NightsMustBeGreaterThanZero),
          $(this).val(1));
        t > n.MaxNumNights &&
          (PopupMsg.showError(
            General.StringFormat(resources.MaxNumberOfNights, n.MaxNumNights)
          ),
          $(this).val(n.MaxNumNights));
        n.SetStartDateForHiddenDepartMode(
          CalendarWidget.ParseDate(n.$Start.data("val")),
          !0
        );
      });
      this.$container.find(".start-date, .end-date").on("blur", function () {
        if ($(this).hasClass("editing")) {
          $(this).removeClass("editing");
          var i = $(this).val();
          let t = CalendarWidget.ParseDate(i);
          if (t != null) {
            if (($(this).removeClass("invalid"), HIDE_DEPARTURE_DATE)) {
              n.SetStartDateForHiddenDepartMode(t).then((t) => {
                t === !0 && (n.LoadMoreMonths(), n.HighlightRange());
              });
              return;
            }
            let i = CalendarWidget.ParseDate(t.getTime());
            CalendarWidget.SetDate($(this), i);
            n.ValidateDates($(this));
            n.LoadMoreMonths();
            n.HighlightRange();
          } else
            n.$container.find(".apply-button").addClass("disabled"),
              $(this).addClass("invalid");
        }
      });
      this.$container.find(".close-button").click(function () {
        n.Cancel();
      });
      t.on("scroll", function () {
        let t = this.scrollHeight,
          i = $(this).outerHeight(),
          r = $(this).scrollTop();
        if (r + i + 150 >= t) {
          let t = n.$container.find(".calendar-widget .month-section").last(),
            i = new Date(t.data("year"), t.data("month"));
          i.setDate(32);
          n.LoadMoreMonths(i);
        }
      });
      this.$container.find(".apply-button").on("click", function () {
        n.SavedStart = CalendarWidget.ParseDate(n.$Start.data("val"));
        n.SavedEnd = CalendarWidget.ParseDate(n.$End.data("val"));
        n.WasOngoing = n.IsOngoing;
        n.Hide();
        let t = n.GetUrlParams();
        BookGen6.Search(t);
      });
    }
  }
  ShowDateHoverMessage(n, t) {
    let i = $(".date-hover-message");
    i.length == 0 &&
      ((i = $('<div class="date-hover-message"></div>')),
      i.appendTo($("body")));
    i.text(t);
    i.addClass("visible");
    let r = n.getBoundingClientRect();
    i.css({
      top: r.top + r.height / 2 + "px",
      left: r.left + r.width + 20 + "px",
    });
  }
  HideDateHoverMessage() {
    let n = $(".date-hover-message");
    n.removeClass("visible");
  }
  Show() {
    document.documentElement.scroll({ top: 0 });
    hideSlideshow();
    this.SavedStart = CalendarWidget.ParseDate(this.$Start.data("val"));
    this.SavedEnd = CalendarWidget.ParseDate(this.$End.data("val"));
    this.WasOngoing = this.IsOngoing;
    this.$container.addClass("visible");
    IS_DESKTOP || $("body").css({ overflow: "hidden" });
    this.$container.find(".apply-button").show();
    let n = this.$container
        .find(".calendar-widget .date-grid div.selected")
        .first(),
      t = CalendarWidget.ParseDate(n.data("date"));
    t.setDate(32);
    this.LoadMoreMonths(t);
    let i = n.closest(".month-section"),
      r = this.$container.find(".calendar-widget");
    r.scrollTop(
      i.position().top -
        this.$container.find(".calendar-widget .months-container").position()
          .top
    );
    this.UpdateAvailableDays();
    $(".guests-dropdown-content").slideUp();
    IS_DESKTOP ||
      IS_TABLET ||
      !$("#ListingDetails-panel").hasClass("visible") ||
      ($("#ListingDetails-panel")
        .css("overflow", "hidden")
        .addClass("datePickerMobile"),
      $("#ListingDetails-panel .date-filter.visible")
        .css("bottom", "unset")[0]
        .scrollIntoView(),
      $(".reservation-info-bar").removeClass("visible"));
  }
  Hide() {
    this.$container.removeClass("visible");
    this.$container
      .find("input.start-date, input.end-date")
      .removeClass("selected");
    $("body").css({ overflow: "unset" });
    this.$container.find(".apply-button").hide();
    $("#ListingDetails-panel")
      .css("overflow", "auto")
      .removeClass("datePickerMobile");
    IS_DESKTOP || $(".reservation-info-bar").addClass("visible");
  }
  Cancel() {
    CalendarWidget.SetDate(
      this.$container.find("input.start-date"),
      this.SavedStart
    );
    this.IsOngoing != this.WasOngoing &&
      this.$container.find(".ongoing-btn").trigger("click");
    this.WasOngoing ||
      CalendarWidget.SetDate(
        this.$container.find("input.end-date"),
        this.SavedEnd
      );
    this.HighlightRange();
    this.Hide();
  }
  ClearInputs() {
    this.TextBox = this.$Start;
    this.$Start.addClass("selected");
    this.$Start.val("");
    this.$Start.data("val", "");
    this.$End.val("");
    this.$End.data("val", "");
    this.$End.removeClass("selected");
  }
  ValidateDates(n) {
    this.$container.find(".apply-button").addClass("disabled");
    var t = CalendarWidget.ParseDate(this.$Start.data("val")),
      i = CalendarWidget.ParseDate(this.$End.data("val"));
    if (t > this.MaxDate) {
      PopupMsg.showError(CalendarResources.CantBookTooFarInAdvance);
      this.ClearInputs();
      return;
    }
    if (t < this.MinDate) {
      PopupMsg.showError(CalendarResources.CantBookBeforeMinDate);
      this.ClearInputs();
      return;
    }
    if (!this.IsOngoing && i != null) {
      let r = CalendarWidget.ParseDate(t.getTime());
      if ((r.setDate(r.getDate() + this.MaxNumNights), i < this.MinDate)) {
        PopupMsg.showError(CalendarResources.CantBookBeforeMinDate);
        this.ClearInputs();
        return;
      }
      if (i > r) {
        PopupMsg.showError(CalendarResources.CantReserveMoreNights);
        CalendarWidget.SetDate(this.$End, r);
        i = CalendarWidget.ParseDate(r.getTime());
        return;
      }
      n.hasClass("start-date")
        ? t >= i &&
          ((i = CalendarWidget.ParseDate(t.getTime())),
          i.setDate(t.getDate() + 1),
          CalendarWidget.SetDate(this.$End, i))
        : n.hasClass("end-date") &&
          i <= t &&
          ((t = CalendarWidget.ParseDate(t.getTime())),
          t.setDate(i.getDate() - 1),
          CalendarWidget.SetDate(this.$Start, t));
    }
    (this.IsOngoing || i != null) &&
      t != null &&
      this.$container.find(".apply-button").removeClass("disabled");
  }
  UpdateNumNights() {
    let n = this.NumNights || "--";
    this.$container.find(".num-nights span.nights").text(n);
  }
  HighlightRange() {
    this.UpdateNumNights();
    this.$container
      .find(".calendar-widget .date-grid div.selected")
      .removeClass("selected");
    this.$container
      .find(".calendar-widget .date-grid div.checkout-date")
      .removeClass("checkout-date")
      .removeAttr("title");
    let i = this;
    var t = CalendarWidget.ParseDate(this.$Start.data("val")).getTime(),
      n = CalendarWidget.ParseDate(this.$End.data("val"));
    n = n != null ? n.getTime() : t;
    this.$container.find(".calendar-widget .date-grid div").each(function () {
      var r = $(this).data("date");
      r != null &&
        (i.IsOngoing || r <= n) &&
        r >= t &&
        ($(this).addClass("selected"),
        r == n &&
          n != t &&
          $(this)
            .addClass("checkout-date")
            .attr("title", Resources.CheckOutDate));
    });
  }
  async GetNextOccupiedDate(n, t) {
    if (n == null || t == null) throw "Null date passed in.";
    let i = null,
      r = new Date(n.getTime());
    r.setDate(1);
    let u = await GetOccupancyForMonth(r, this.reservableID, this.classID);
    for (let t = 0; t < u.length; t++) {
      let f = u[t],
        r = new Date(f);
      if (r >= n) {
        i = r;
        break;
      }
    }
    return i == null
      ? (n.setDate(32),
        n.setDate(1),
        n > t ? t : this.GetNextOccupiedDate(n, t))
      : i < t
      ? i
      : t;
  }
  async UpdateAvailableDays() {
    let n = this,
      i = CalendarWidget.ParseDate(n.MinDate.getTime()).getTime(),
      t = null,
      r = n.$End.hasClass("selected");
    if (r) {
      let i = CalendarWidget.ParseDate(n.$Start.data("val"));
      i.setDate(i.getDate() + n.MaxNumNights);
      let r = CalendarWidget.ParseDate(n.$Start.data("val")),
        u = await n.GetNextOccupiedDate(r, i);
      t = u.getTime();
    } else {
      let i = CalendarWidget.ParseDate(n.MaxDate.getTime());
      t = i.getTime();
    }
    n.$container.find(".calendar-widget .month-section").each(function () {
      $(this)
        .find(".date-grid div")
        .each(async function () {
          var u = $(this).data("date");
          if (u != null)
            if ((u < i || u > t) && !$(this).hasClass("selected"))
              u > n.MaxDate.getTime() || u < i
                ? $(this).addClass("disabled")
                : $(this).addClass("overMax");
            else {
              let i =
                (!r || u != t) &&
                (await IsDateOccpied(u, n.reservableID, n.classID));
              $(this).removeClass("overMax");
              i
                ? $(this).addClass("disabled")
                : $(this).removeClass("disabled");
            }
        });
    });
  }
  LoadMoreMonths(n) {
    if (n == null) {
      let n = CalendarWidget.ParseDate(this.$Start.data("val")),
        t = CalendarWidget.ParseDate(this.$End.data("val"));
      this.LoadMoreMonths(n);
      this.LoadMoreMonths(t);
      return;
    }
    let i = null,
      u = null;
    this.$container.find(".calendar-widget .month-section").each(function () {
      let t = $(this).data("month"),
        r = $(this).data("year"),
        n = new Date(r, t);
      (i == null || n < i) && (i = n);
      (u == null || n > u) && (u = n);
    });
    let f = CalendarWidget.ParseDate(this.MaxDate.getTime());
    f.setDate(f.getDate() + this.MaxNumNights);
    let e = CalendarWidget.ParseDate(n.getTime());
    e.setDate(32);
    e.setDate(0);
    e >= f && ((n = f), this.$container.find(".calendar-widget").off("scroll"));
    n < this.MinDate && (n = this.MinDate);
    let t = CalendarWidget.ParseDate(n.getTime()),
      r = document.createDocumentFragment();
    while (
      t.getFullYear() < i.getFullYear() ||
      (t.getFullYear() <= i.getFullYear() && t.getMonth() < i.getMonth())
    )
      r.appendChild(CalendarWidget.LoadMonth(t, this.MinDate, this.MaxDate)),
        t.setDate(32);
    for (
      this.$container.find(".calendar-widget .months-container").prepend(r),
        t = CalendarWidget.ParseDate(u.getTime()),
        t.setDate(32),
        r = document.createDocumentFragment();
      t.getFullYear() < n.getFullYear() ||
      (t.getFullYear() <= n.getFullYear() && t.getMonth() <= n.getMonth());

    )
      r.appendChild(CalendarWidget.LoadMonth(t, this.MinDate, this.MaxDate)),
        t.setDate(32);
    this.$container.find(".calendar-widget .months-container").append(r);
    this.UpdateAvailableDays();
  }
  GetUrlParams(n) {
    var i, r, u;
    n == null && (n = new URLSearchParams());
    i = this.$Start.data("val");
    let t = CalendarWidget.ParseDate(i);
    return (
      i != null &&
        t != null &&
        (n.set("StartDate", CalendarWidget.ToISODate(t)),
        (r = this.$End.data("val")),
        (t = CalendarWidget.ParseDate(r)),
        r != null &&
          t != null &&
          (n.set("EndDate", CalendarWidget.ToISODate(t)),
          (u = CalendarWidget.CalculateNumNights(
            CalendarWidget.ParseDate(i),
            CalendarWidget.ParseDate(r)
          )),
          n.set("NumNights", u))),
      n
    );
  }
  async SetStartDateForHiddenDepartMode(n, t) {
    let i = new Date(n.getTime());
    i.setDate(i.getDate() + parseInt(this.$Nights.val()));
    let u = i.getTime();
    this.LoadMoreMonths(CalendarWidget.ParseDate(u));
    let r = new Date(n.getTime());
    for (let n = 0; n < parseInt(this.$Nights.val()); n++) {
      let t = await IsDateOccpied(r.getTime(), this.reservableID, this.classID);
      if (t) {
        if (n == 0) {
          PopupMsg.showError("Date is unavailable.");
          return;
        }
        let t = parseInt(this.$Nights.val());
        PopupMsg.showMsg(
          General.StringFormat(resources.SelectionOfNightsNotAvailable, t, n)
        );
        this.$Nights.val(n);
        i = r;
        continue;
      }
      r.setDate(r.getDate() + 1);
    }
    return (
      CalendarWidget.SetDate(this.$Start, n),
      CalendarWidget.SetDate(this.$End, i),
      t && this.$container.find(".apply-button").click(),
      !0
    );
  }
  OpenWithDateSelected(n) {
    if (HIDE_DEPARTURE_DATE) {
      this.SetStartDateForHiddenDepartMode(n, !0);
      return;
    }
    this.$Start.trigger("click");
    let i = n.getTime();
    this.LoadMoreMonths(CalendarWidget.ParseDate(i));
    let r = this.$container.find(
      '.calendar-widget .date-grid > div[data-date="' + i + '"]'
    );
    r.trigger("click");
    let t = this.$container.find(".calendar-widget"),
      u =
        t.scrollTop() +
        r.closest(".month-section").offset().top -
        t.offset().top;
    t.scrollTop(u);
  }
  get NumNights() {
    var n = CalendarWidget.ParseDate(this.$Start.data("val")),
      t = CalendarWidget.ParseDate(this.$End.data("val"));
    return n == null || t == null
      ? null
      : CalendarWidget.CalculateNumNights(n, t);
  }
  async SetRange(n, t, i) {
    if (
      ((t === undefined || t === null) &&
        (t = new Date(n.getTime() + this.NumNights * ONE_DAY_IN_MS)),
      i === undefined && (i = !0),
      CalendarWidget.SetDate(this.$Start, n),
      CalendarWidget.SetDate(this.$End, t),
      this.HighlightRange(),
      i)
    ) {
      let n = this.GetUrlParams();
      await BookGen6.Search(n);
    }
  }
  static CalculateNumNights(n, t) {
    var i = t - n;
    return Math.round(i / ONE_DAY_IN_MS);
  }
  static SetDate(n, t) {
    n.data("val", CalendarWidget.GetShortDateString(t));
    let i = t.toLocaleString("default", { weekday: "short" }),
      r = t.toLocaleString("default", { month: "short" });
    DISPLAY_LOCALE.substr(0, 2).toLowerCase() == "en"
      ? n.val(i + ", " + r + " " + t.getDate() + ", " + t.getFullYear())
      : n.val(CalendarWidget.GetShortDateString(t));
  }
  static ToISODate(n) {
    return n.getMonth() + 1 + "/" + n.getDate() + "/" + n.getFullYear();
  }
  static GetParseOrder() {
    if (this.locale == DISPLAY_LOCALE && this.positions != null)
      return this.positions;
    let i = new Date(2003, 1, 1),
      r = CalendarWidget.GetShortDateString(i),
      t = DateRegex.exec(r),
      n = {};
    for (let i = 1; i <= 3; i++)
      t[i] == 2003
        ? (n.year = i)
        : t[i] == 2
        ? (n.month = i)
        : t[i] == 1 && (n.day = i);
    return (this.positions = n), (this.locale = DISPLAY_LOCALE), n;
  }
  static ParseDate(n) {
    if (typeof n == "number" && n > 9e11) return new Date(n);
    let t = DateRegex.exec(n);
    if (t == null) return null;
    let f = CalendarWidget.GetParseOrder(),
      i = t[f.year],
      r = t[f.month] - 1,
      u = t[f.day];
    if (
      i == null ||
      i < 2e3 ||
      i > 2100 ||
      r == null ||
      r < 0 ||
      r > 11 ||
      u == null ||
      u < 1 ||
      u > 31
    )
      return null;
    return new Date(i, r, u);
  }
  static GetShortDateString(n) {
    return n.toLocaleDateString(DISPLAY_LOCALE);
  }
  static LoadMonth(n, t, i) {
    var r = CalendarWidget.ParseDate(n.getTime()),
      h = CalendarWidget.ParseDate(r.getTime()),
      v,
      u,
      o,
      s,
      e,
      l,
      a,
      f;
    h.setDate(32);
    h.setDate(0);
    r.setDate(1);
    v = r.getDay();
    let y = r.getMonth();
    u = document.createElement("div");
    u.classList.add("month-section");
    u.setAttribute("data-month", y);
    u.setAttribute("data-year", r.getFullYear());
    o = document.createElement("div");
    o.classList.add("calendar-title");
    o.innerText = r.toLocaleString(DISPLAY_LOCALE, {
      month: "long",
      year: "numeric",
    });
    u.appendChild(o);
    r.setDate(-v + 1);
    let c = CalendarWidget.ParseDate(r.getTime());
    s = document.createElement("div");
    s.classList.add("days-of-week");
    u.appendChild(s);
    for (let n = 0; n < 7; n++) {
      let n = document.createElement("span");
      n.innerText = c.toLocaleString(DISPLAY_LOCALE, { weekday: "short" });
      s.appendChild(n);
      c.setDate(c.getDate() + 1);
    }
    for (
      e = document.createElement("div"),
        e.classList.add("date-grid"),
        u.appendChild(e),
        l = 0;
      r <= h || l % 7 != 0;

    )
      (a = r.getDate()),
        r.getMonth() == y
          ? ((f = document.createElement("div")),
            (f.innerText = a),
            (r < t || r > i) && f.classList.add("disabled"),
            f.setAttribute("data-date", r.getTime()),
            e.appendChild(f))
          : ((f = document.createElement("div")), e.appendChild(f)),
        r.setDate(a + 1),
        l++;
    return u;
  }
}
class MiniCalendar {
  constructor(n, t) {
    if (
      (t == null && (t = {}),
      t.monthsToShow == null && (t.monthsToShow = 1),
      (this.options = t),
      (this.$cal = n),
      (this.calWidget = t.calWidget),
      (this.displayDate =
        this.calWidget != null
          ? CalendarWidget.ParseDate(this.calWidget.$Start.data("val"))
          : new Date($("#StartDate").val())),
      t.hideLegend && this.$cal.find(".mini-calendar-legend").hide(),
      (this.dateRangeMode = t.dateRangeMode),
      (this.selectedDate = CalendarWidget.ParseDate(
        this.displayDate.getTime()
      )),
      (this.endDate = null),
      this.dateRangeMode && !t.loadEndDate)
    ) {
      let i = 1;
      t.defaultNumDaysSelected && (i = t.defaultNumDaysSelected);
      let n = CalendarWidget.ParseDate(this.selectedDate.getTime());
      n.setDate(n.getDate() + i);
      this.endDate = n;
    } else t.loadEndDate && (this.endDate = new Date($("#EndDate").val()));
    this.reservableID = t.reservableID;
    this.classID = t.classID;
    this.MinDate = new Date($("#MinDate").val());
    this.MaxDate = new Date($("#MaxDate").val());
    t.maxNumNights && (this.MaxNumNights = t.maxNumNights);
    this.RegisterSearchUpdatedEvent();
    this.detailedMode = t.detailedMode;
    this.detailedMode &&
      (this.$cal.addClass("detailedMode"),
      this.SetAdditionalDetailsState(!0),
      this.UpdateDateInputs());
    this.Initialize();
  }
  Initialize() {
    this.LoadMonth();
    let n = this;
    if (this.calWidget != null) {
      this.calWidget.$container.find(".apply-button").on("click", () => {
        (this.selectedDate = CalendarWidget.ParseDate(
          n.calWidget.$Start.data("val")
        )),
          (this.displayDate = CalendarWidget.ParseDate(
            n.calWidget.$Start.data("val")
          )),
          this.LoadMonth();
      });
      this.$cal.on(
        "click",
        ".date-grid > div[data-date]:not(.disabled)",
        async function () {
          if (!n.options.threeMonthPopup) {
            n.calWidget.OpenWithDateSelected(
              CalendarWidget.ParseDate($(this).data("date"))
            );
            return;
          }
          let i = CalendarWidget.ParseDate($(this).data("date")),
            r = n.calWidget.NumNights,
            t = new Date(i.getTime());
          t.setDate(t.getDate() + r);
          n.selectedDate = i;
          n.endDate = t;
          await n.calWidget.SetRange(i, t);
          n.options.threeMonthPopup === !0 &&
            BookGen6.LoadRoomDetails(n.reservableID, n.classID);
        }
      );
    } else
      this.$cal.on(
        "click",
        ".date-grid > div[data-date]:not(.disabled)",
        function () {
          n.ClickHandler(CalendarWidget.ParseDate($(this).data("date")));
        }
      );
    this.$cal.find(".arrow-right").on("click", () => {
      for (let t = 0; t < n.options.monthsToShow; t++)
        this.displayDate.setDate(32), this.displayDate.setDate(1);
      this.LoadMonth();
      this.dateRangeMode &&
        this.reservableID != null &&
        this.UpdateAvailableDays();
    });
    this.$cal.find(".arrow-left").on("click", () => {
      for (let t = 0; t < n.options.monthsToShow; t++)
        this.displayDate.setDate(-1), this.displayDate.setDate(1);
      this.LoadMonth();
      this.dateRangeMode &&
        this.reservableID != null &&
        this.UpdateAvailableDays();
    });
    if (this.detailedMode) {
      this.$cal
        .find("input.start-date, input.end-date")
        .on("click", function () {
          $(this).hasClass("editing") ||
            ($(this).val($(this).data("val")), $(this).addClass("editing"));
          let t = !0;
          $(this).hasClass("end-date") && (t = !1);
          n.SetAdditionalDetailsState(t);
        });
      this.$cal
        .find("input.start-date, input.end-date")
        .on("blur", function () {
          n.ValidateDates($(this));
          n.detailedMode && n.UpdateDateInputs();
          n.HighlightRange();
          $(this).removeClass("editing");
        });
    }
    if (this.options.isWorryFreeCalendar)
      $(document)
        .off("click", ".green.checkout-button.worry-free-reschedule")
        .on(
          "click",
          ".green.checkout-button.worry-free-reschedule",
          async function () {
            let i = CalendarWidget.ToISODate(n.selectedDate),
              r = CalendarWidget.ToISODate(n.endDate),
              t = await Ajax({
                baseUrl:
                  "/ResNexus/Reservations/WorryFreeResNexus/" +
                  General.GetUID() +
                  "/",
                url: "RescheduleReservation",
                data: { startDate: i, endDate: r },
              });
            t.success
              ? (window.location.url =
                  "/ResNexus/Reservations/WorryFreeResNexus/" +
                  General.GetUID() +
                  "/Rescheduled")
              : alert(JSON.stringify(t));
          }
        );
  }
  ClickHandler(n) {
    if (
      (this.dateRangeMode
        ? this.endDate == null ||
          this.$cal.find(".end-date").hasClass("selected")
          ? n <= this.selectedDate
            ? ((this.selectedDate = n),
              (this.endDate = null),
              this.options.defaultNumDaysSelected > 0 &&
                this.SetEndDateForMinStay())
            : ((this.endDate = n), this.SetAdditionalDetailsState(!0))
          : this.options.defaultNumDaysSelected > 0
          ? ((this.selectedDate = n),
            this.SetEndDateForMinStay(),
            this.SetAdditionalDetailsState(!1))
          : ((this.selectedDate = n),
            (this.endDate = null),
            this.SetAdditionalDetailsState(!1))
        : (this.selectedDate = n),
      this.ValidateDates(null),
      this.detailedMode && this.UpdateDateInputs(),
      this.HighlightRange(),
      this.dateRangeMode &&
        this.reservableID != null &&
        this.UpdateAvailableDays(),
      this.endDate != null && this.options.isWorryFreeCalendar)
    ) {
      let n = CalendarWidget.ToISODate(this.selectedDate),
        t = CalendarWidget.ToISODate(this.endDate);
      Ajax({
        baseUrl:
          "/ResNexus/Reservations/WorryFreeResNexus/" + General.GetUID() + "/",
        url: "BookRoom",
        data: { startDate: n, endDate: t },
      }).then((n) => {
        n.success &&
          n.cartHTML &&
          $(".checkout-panel.cart-view.worry-free-cart").replaceWith(
            n.cartHTML
          );
      });
    }
  }
  SetAvailability(n, t) {
    t ||
      this.$cal
        .find(".date-grid > div.disabled.occupied")
        .removeClass("occupied")
        .removeClass("disabled");
    n.forEach((n) => {
      let t = new Date(n).getTime();
      this.$cal
        .find('.date-grid > div[data-date="' + t + '"]')
        .addClass("occupied")
        .addClass("disabled");
    });
  }
  CheckDates() {
    let n = CalendarWidget.ParseDate(this.displayDate.getTime());
    n.setDate(1);
    n <= this.MinDate
      ? this.$cal.find(".arrow-left").addClass("disabled")
      : this.$cal.find(".arrow-left").removeClass("disabled");
    n.setDate(32);
    n.setDate(0);
    n >= this.MaxDate
      ? this.$cal.find(".arrow-right").addClass("disabled")
      : this.$cal.find(".arrow-right").removeClass("disabled");
  }
  LoadMonth() {
    let t = CalendarWidget.ParseDate(this.displayDate.getTime()),
      n = document.createDocumentFragment();
    this.SetAvailability([]);
    for (let t = 0; t < this.options.monthsToShow; t++) {
      t > 0 && (this.displayDate.setDate(32), this.displayDate.setDate(1));
      n.appendChild(
        CalendarWidget.LoadMonth(this.displayDate, this.MinDate, this.MaxDate)
      );
      let i = CalendarWidget.ParseDate(this.displayDate.getTime());
      i.setDate(1);
      this.reservableID != null &&
        GetOccupancyForMonth(
          i,
          this.reservableID,
          this.classID,
          this.options.threeMonthPopup
        ).then((n) => this.SetAvailability(n, !0));
    }
    this.displayDate = t;
    this.$cal.find(".month-section").html(n);
    this.CheckDates();
    this.HighlightRange();
  }
  HighlightRange() {
    this.UpdateNumNights();
    let i = this;
    if (
      (this.$cal.find(".date-grid div.selected").removeClass("selected"),
      this.$cal
        .find(".date-grid div.checkout-date")
        .removeClass("checkout-date")
        .removeAttr("title"),
      this.calWidget != null)
    ) {
      var t = CalendarWidget.ParseDate(
          this.calWidget.$Start.data("val")
        ).getTime(),
        n = CalendarWidget.ParseDate(this.calWidget.$End.data("val"));
      n = n != null ? n.getTime() : t;
      this.$cal.find(".date-grid div").each(function () {
        var r = $(this).data("date");
        r != null &&
          (i.calWidget.IsOngoing || r <= n) &&
          r >= t &&
          ($(this).addClass("selected"),
          r == n &&
            n != t &&
            $(this)
              .addClass("checkout-date")
              .attr("title", Resources.CheckOutDate));
      });
    } else {
      let t = this.selectedDate.getTime(),
        n;
      n =
        this.dateRangeMode && this.endDate != null ? this.endDate.getTime() : t;
      let i = this.$cal.find(".date-grid div:not(.disabled)");
      i.each(function () {
        let i = parseInt($(this).data("date"));
        i <= n &&
          i >= t &&
          ($(this).addClass("selected"),
          i == n &&
            n != t &&
            $(this)
              .addClass("checkout-date")
              .attr("title", Resources.CheckOutDate));
      });
    }
  }
  RegisterSearchUpdatedEvent() {
    let n = this;
    this.SearchUpdatedFunc = function (t) {
      if (n.calWidget != null) n.HighlightRange();
      else {
        let i = t.detail.params,
          r = i.get("StartDate"),
          u = i.get("EndDate");
        if (r != null && u != null) {
          let t = new Date(i.get("StartDate")),
            r = new Date(i.get("EndDate"));
          n.selectedDate = t;
          n.endDate = r;
        }
      }
      n.options.threeMonthPopup === !0 && n.UnregisterSearchEvent();
    };
    $(document).on("searchParamsUpdated", this.SearchUpdatedFunc);
  }
  UnregisterSearchEvent() {
    this.SearchUpdatedFunc != null &&
      $(document).off("searchParamsUpdated", this.SearchUpdatedFunc);
  }
  GetUrlParams(n) {
    return (
      n == null && (n = new URLSearchParams()),
      this.selectedDate != null &&
        (n.set("StartDate", CalendarWidget.ToISODate(this.selectedDate)),
        this.endDate != null &&
          (n.set("EndDate", CalendarWidget.ToISODate(this.endDate)),
          n.set(
            "NumNights",
            CalendarWidget.CalculateNumNights(this.selectedDate, this.endDate)
          ))),
      n
    );
  }
  SetAdditionalDetailsState(n) {
    this.detailedMode &&
      (n
        ? (this.$cal.find(".cal-additional-details .select-start-date").show(),
          this.$cal.find(".cal-additional-details .select-end-date").hide(),
          this.$cal.find(".start-date").addClass("selected"),
          this.$cal.find(".end-date").removeClass("selected"))
        : (this.$cal.find(".cal-additional-details .select-start-date").hide(),
          this.$cal.find(".cal-additional-details .select-end-date").show(),
          this.$cal.find(".start-date").removeClass("selected"),
          this.$cal.find(".end-date").addClass("selected")));
  }
  UpdateNumNights() {
    let n = this.NumNights || "--";
    this.$cal.find(".num-nights span.nights").text(n);
  }
  get NumNights() {
    return this.selectedDate == null || this.endDate == null
      ? null
      : CalendarWidget.CalculateNumNights(this.selectedDate, this.endDate);
  }
  UpdateDateInputs() {
    CalendarWidget.SetDate(this.$cal.find(".start-date"), this.selectedDate);
    this.endDate != null
      ? CalendarWidget.SetDate(this.$cal.find(".end-date"), this.endDate)
      : this.$cal.find(".end-date").val("");
  }
  ValidateDates(n) {
    var t = this.selectedDate,
      i = this.endDate;
    if (
      (n &&
        (n.hasClass("start-date")
          ? (t = CalendarWidget.ParseDate(n.val()))
          : (i = CalendarWidget.ParseDate(n.val()))),
      t > this.MaxDate)
    ) {
      PopupMsg.showError(CalendarResources.CantBookTooFarInAdvance);
      return;
    }
    if (t < this.MinDate) {
      PopupMsg.showError(CalendarResources.CantBookBeforeMinDate);
      return;
    }
    if (i != null) {
      let r = CalendarWidget.ParseDate(t.getTime());
      if ((r.setDate(r.getDate() + this.MaxNumNights), i < this.MinDate)) {
        PopupMsg.showError(CalendarResources.CantBookBeforeMinDate);
        return;
      }
      if (i > r) {
        PopupMsg.showError(CalendarResources.CantReserveMoreNights);
        this.endDate = r;
        this.displayDate = new Date(this.endDate.getTime());
        this.LoadMonth();
        return;
      }
      n &&
        (n.hasClass("start-date")
          ? (t >= i &&
              ((i = CalendarWidget.ParseDate(t.getTime())),
              i.setDate(t.getDate() + 1),
              (this.endDate = i)),
            (this.selectedDate = t))
          : n.hasClass("end-date") &&
            (i <= t &&
              ((t = CalendarWidget.ParseDate(i.getTime())),
              t.setDate(i.getDate() - 1),
              (this.selectedDate = t)),
            (this.endDate = i)));
    }
  }
  SetEndDateForMinStay() {
    if (this.options.defaultNumDaysSelected > 0) {
      let n = CalendarWidget.ParseDate(this.selectedDate.getTime());
      n.setDate(n.getDate() + this.options.defaultNumDaysSelected);
      this.endDate = n;
    }
  }
  async GetNextOccupiedDate(n, t) {
    if (n == null || t == null) throw "Null date passed in.";
    let i = null,
      r = new Date(n.getTime());
    r.setDate(1);
    let u = await GetOccupancyForMonth(
      r,
      this.reservableID,
      this.classID,
      this.options.threeMonthPopup
    );
    for (let t = 0; t < u.length; t++) {
      let f = u[t],
        r = new Date(f);
      if (r > n) {
        i = r;
        break;
      }
    }
    return i == null
      ? (n.setDate(32),
        n.setDate(1),
        n > t ? t : this.GetNextOccupiedDate(n, t))
      : i;
  }
  async UpdateAvailableDays() {
    let n = this,
      r = CalendarWidget.ParseDate(n.MinDate.getTime()).getTime(),
      t = null,
      i = n.endDate == null;
    if (i) {
      let i = new Date(n.selectedDate.getTime());
      i.setDate(i.getDate() + n.MaxNumNights);
      let r = new Date(n.selectedDate.getTime()),
        u = await n.GetNextOccupiedDate(r, i);
      t = u.getTime();
    } else {
      let i = CalendarWidget.ParseDate(n.MaxDate.getTime());
      t = i.getTime();
    }
    n.$cal.find(".month-section").each(function () {
      $(this)
        .find(".date-grid div")
        .each(async function () {
          var u = $(this).data("date");
          if (u != null)
            if ((u < r || u > t) && !$(this).hasClass("selected"))
              $(this).addClass("disabled");
            else {
              let r =
                (!i || u != t) &&
                (await IsDateOccpied(
                  u,
                  n.reservableID,
                  n.classID,
                  n.options.threeMonthPopup
                ));
              r
                ? $(this).addClass("disabled")
                : $(this).removeClass("disabled");
            }
        });
    });
  }
}
window.OccupancyByMonth = {};
window.OccupancyByClass = {};
window.cachedOccupiedDates = {};
let OccupancyPromises = {};
let $dateFilter = $(".desktop-grid > .search-filters .date-filter");
$dateFilter.length > 0 &&
  ((window.searchPageWidget = new CalendarWidget(
    $(".desktop-grid > .search-filters .date-filter")
  )),
  (miniCal = new MiniCalendar(
    $(".desktop-grid > .search-filters .mini-calendar"),
    { calWidget: window.searchPageWidget, reservableID: "all" }
  )));
DEFAULT_RN_HEADER_HEIGHT = 70;
Header = {
  MenuItems: [],
  OverflowItems: [],
  Initialize: function () {
    $("header .menu-items")
      .children("a")
      .each(function () {
        Header.MenuItems.push({
          width: this.getBoundingClientRect().width,
          $elem: $(this),
        });
      });
    $(window).on("resize", Header.CheckForResize);
    IS_DESKTOP && Header.CheckForResize();
  },
  GetWidths: function (n) {
    let t = 0;
    for (let i = 0; i < n.length; i++) t += n[i].width;
    return t;
  },
  CheckForResize: function () {
    if (IS_DESKTOP) {
      let n = document.querySelector("header div.menu-items");
      if (n) {
        n.style.overflow = "hidden";
        let t = Math.ceil(n.getBoundingClientRect().width),
          i = n.scrollWidth > t;
        if (i)
          for (n.classList.add("overflow-visible"); n.scrollWidth - 2 > t; ) {
            let n = Header.MenuItems.pop();
            n.$elem.remove();
            $("header .menu-items .overflow-items .spacer").after(n.$elem);
            Header.OverflowItems.splice(0, 0, n);
          }
        else
          for (;;)
            if (Header.OverflowItems.length > 0) {
              let n = Header.GetWidths(Header.MenuItems);
              if (
                (Header.OverflowItems.length > 1 &&
                  (n += $("header .menu-items .menu-overflow").width()),
                n + Header.OverflowItems[0].width <= t - 80)
              ) {
                let n = Header.OverflowItems.shift();
                Header.MenuItems.push(n);
                n.$elem.remove();
                Header.MenuItems[Header.MenuItems.length - 2].$elem.after(
                  n.$elem
                );
              } else break;
            } else {
              n.classList.remove("overflow-visible");
              break;
            }
        n.style.overflow = null;
      }
    }
  },
  AdjustForRNWHeader: function () {
    let n = $(".rn-website-header, .custom-header");
    if (n && n.length > 0) {
      let n = DEFAULT_RN_HEADER_HEIGHT;
      IS_DESKTOP
        ? ($("header").hide(),
          $(".rn-website-header, .custom-header").show(),
          (n = 0))
        : ($(".rn-website-header, .custom-header").hide(), $("header").show());
      document.documentElement.style.setProperty("--header-height", n + "px");
    }
  },
};
class LabeledRangeInput {
  constructor(n, t) {
    this.$container = $(
      '<div class="length-input-container"><div class="length-input-label"><input type="text" class="length-label-input" /><span class="unit">' +
        (t || "") +
        '</span><div class="arrow"></div></div></div>'
    );
    this.min = n.attr("min");
    this.max = n.attr("max");
    this.value = n.val();
    this.onChange = [];
    n.before(this.$container);
    n.appendTo(this.$container);
    this.Initialize();
  }
  change(n) {
    this.onChange.push(n);
  }
  get percent() {
    return ((this.value - this.min) / (this.max - this.min)) * 100;
  }
  Initialize() {
    let n = this;
    this.$container
      .find("input[type=range]")
      .on("change mousemove touchmove", function () {
        let f = $(this).val();
        $(".length-label-input").val(f);
        n.value = f;
        let i = n.$container.find(".length-input-label").outerWidth(),
          e = n.$container.outerWidth(),
          r = e - i,
          u = 0,
          o = (n.percent / 100) * e,
          s = ((n.percent - 50) / 50) * 7,
          h = i / 2 + s,
          t = o - h;
        if (t > r) {
          let u = t - r;
          u = Math.min(u, i / 2 - 10);
          n.$container
            .find(".length-input-label .arrow")
            .css("transform", "translateX(" + u + "px) rotate(45deg)");
          t = r;
        } else if (t < u) {
          let r = t - u;
          r = Math.max(r, i / -2 + 10);
          n.$container
            .find(".length-input-label .arrow")
            .css("transform", "translateX(" + r + "px) rotate(45deg)");
          t = u;
        } else
          n.$container
            .find(".length-input-label .arrow")
            .css("transform", "rotate(45deg) translateX(0px)");
        n.$container.find(".length-input-label").css("left", t);
        for (let t = 0; t < n.onChange.length; t++) n.onChange[t](n.value);
      })
      .trigger("change");
    this.$container.find(".length-label-input").on("keyup", function (n) {
      if (n.key == "Enter") $(this).trigger("blur");
      else {
        let n = $(this).val(),
          t = new RegExp(/^\d+\.?\d*$/);
        n.length > 0 && !t.test(n) && $(this).val(n.substr(0, n.length - 1));
        $(".length-input-container input[type=range]").val($(this).val());
      }
    });
    this.$container.find(".length-label-input").on("blur", function () {
      $(".length-input-container input[type=range]")
        .val($(this).val())
        .trigger("change");
    });
  }
}
const OVERFLOW_HTML =
  '<div class="menu-overflow"><div class="triple-dots"><div></div><div></div><div></div></div><div class="overflow-items"><div class="spacer"></div></div></div>';
class OverflowMenu {
  constructor(n, t) {
    this.MenuItems = [];
    this.OverflowItems = [];
    this.$container = n;
    this.options = t;
    this.Initialize();
  }
  Initialize() {
    let n = this;
    this.$container.find(".menu-overflow").length == 0 &&
      this.$container.append(OVERFLOW_HTML);
    this.$container.children().each(function () {
      if (!$(this).hasClass("menu-overflow")) {
        let t = getComputedStyle(this),
          i =
            this.getBoundingClientRect().width +
            parseFloat(t.marginLeft) +
            parseFloat(t.marginRight);
        n.MenuItems.push({ width: i, $elem: $(this) });
      }
    });
    $(window).on("resize", () => this.SizeChanged());
    this.SizeChanged();
  }
  SizeChanged() {
    let n = this.$container[0];
    if (n) {
      n.style.overflow = "hidden";
      let t = Math.ceil(n.getBoundingClientRect().width),
        i = n.scrollWidth > t;
      if (i)
        for (n.classList.add("overflow-visible"); n.scrollWidth - 2 > t; ) {
          let n = this.MenuItems.pop();
          n.$elem.remove();
          this.$container.find(".overflow-items .spacer").after(n.$elem);
          this.OverflowItems.splice(0, 0, n);
        }
      else
        for (;;)
          if (this.OverflowItems.length > 0) {
            let i = OverflowMenu.GetWidths(this.MenuItems);
            this.OverflowItems.length > 1 &&
              (i += this.$container.find(".menu-overflow").width());
            let r = getComputedStyle(n),
              u = parseFloat(r.paddingLeft) + parseFloat(r.paddingRight);
            if (i + this.OverflowItems[0].width <= t - u) {
              let n = this.OverflowItems.shift();
              this.MenuItems.push(n);
              n.$elem.remove();
              this.MenuItems[this.MenuItems.length - 2].$elem.after(n.$elem);
            } else break;
          } else {
            n.classList.remove("overflow-visible");
            break;
          }
      n.style.overflow = null;
    }
  }
  static GetWidths(n) {
    let t = 0;
    for (let i = 0; i < n.length; i++) t += n[i].width;
    return t;
  }
}
$(document).ready(function () {
  let n = $(".red-dropdown-bar .bookingTabs");
  n.length > 0 && (window.bookingTabMenu = new OverflowMenu(n));
});
