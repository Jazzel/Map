const MIN_FIT_SCALE = 1;
class ZoomBox {
  constructor(n, t) {
    this.useFitMode =
      t == null
        ? n.attr("use-fit-mode") === "" || n.attr("use-fit-mode") == !0
          ? !0
          : !1
        : t;
    this.$box = n;
    this.scale = 0.5;
    this.mouseX = 0;
    this.mouseY = 0;
    this.translateX = 0;
    this.translateY = 0;
    this.mouseDown = !1;
    this.clientX = 0;
    this.clientY = 0;
    this.minScale = 0.2;
    this.maxScale = 40;
    this.touches = [];
    this.hasMoved = !1;
    this.maxTranslateX = 0;
    this.maxTranslateY = 0;
    this.dontMove = !1;
    this.Initialize();
  }
  AddClickListener(n, t) {
    let i = this;
    this.$box.on("click", n, function (n) {
      let r = this;
      if (!i.hasMoved) {
        let i = t.bind(r, n);
        i();
      }
    });
  }
  IgnoreMapMove(n) {
    this.$box.on("mousedown", n, (n) => {
      n.buttons != 4 && (this.dontMove = !0);
    });
    this.$box.on("mouseup", n, () => {
      this.dontMove = !1;
    });
  }
  Initialize() {
    // let t = $('<div class="zoom-content"></div>');
    // this.$box.children().appendTo(t);
    // t.appendTo(this.$box);
    // let i =
    //   $();
    //   // '<div class="zoom-box-control zoom-in">+</div><div class="zoom-box-control zoom-out">-</div><div class="zoom-box-control fullscreen-toggle fa"></div><div class="zoom-box-select"><select><option>1x</option><option>2x</option><option>4x</option><option>6x</option><option>8x</option></select></div>'
    // i.appendTo(this.$box);
    // let r = $(
    //   '<div class="two-finger-overlay">' +
    //     this.$box.data("overlay-text") +
    //     "</div>"
    // );
    // r.appendTo(this.$box);
    this.CalcMinScale();
    this.scale = this.initialScale;
    this.Render();
    this.$box.on("mousewheel wheel", (n) => this.HandleMouseWheel(n));
    this.$box.on("mousedown", (n) => this.HandleMouseDown(n));
    this.$box.on("mousemove", (n) => this.HandleMouseMove(n));
    this.$box.on("click", ".zoom-in", () => {
      this.ScaleBy(1.2), this.Render();
    });
    this.$box.on("click", ".zoom-out", () => {
      this.ScaleBy(0.8), this.Render();
    });
    let n = this;
    this.$box.on("change", ".zoom-box-select select", function () {
      let t = parseInt($(this).val());
      n.scale = n.initialScale * t;
      n.Render();
    });
    this.$box.on("click", ".fullscreen-toggle", () =>
      this.$box.toggleClass("fullscreen")
    );
    this.$box.on("touchstart", (n) => (this.touches = n.touches));
    this.$box.length > 0 &&
      this.$box[0].addEventListener(
        "click",
        (n) => {
          this.hasMoved && (n.preventDefault(), n.stopPropagation());
        },
        { capture: !0 }
      );
    this.$box.on("touchend", (n) => {
      (this.touches = n.touches),
        this.$box.find(".two-finger-overlay").removeClass("visible"),
        n.touches.length == 0 && (this.hasMoved = !1);
    });
    this.$box.on("touchmove", (n) => this.HandleTouchMove(n));
    if (window.ResizeObserver) {
      const n = new ResizeObserver(() => {
        this.CalcMinScale();
      });
      n.observe(this.$box[0]);
    }
  }
  CalcMinScale() {
    let i = this.$box.width(),
      r = this.$box.find(".zoom-content").width(),
      u = this.$box.height(),
      f = this.$box.find(".zoom-content").height(),
      n = i / r,
      t = u / f;
    this.useFitMode
      ? ((this.initialScale = Math.min(n, t)),
        (this.minScale = this.initialScale * MIN_FIT_SCALE))
      : ((this.initialScale = Math.max(n, t)),
        (this.minScale = this.initialScale));
    (this.scale == null || this.scale < this.minScale) &&
      ((this.scale = this.initialScale), this.Render());
  }
  HandleMouseDown(n) {
    $(n.target).is("select") || n.preventDefault();
    this.hasMoved = !1;
    this.clientX = n.clientX;
    this.clientY = n.clientY;
  }
  HandleMouseMove(n) {
    if (!this.dontMove && n.buttons > 0) {
      let t = n.clientX - this.clientX,
        i = n.clientY - this.clientY;
      this.translateX += t / this.scale;
      this.translateY += i / this.scale;
      this.Render();
      this.clientX = n.clientX;
      this.clientY = n.clientY;
      Math.abs(t) + Math.abs(i) > 2 && (this.hasMoved = !0);
    }
  }
  HandleTouchMove(n) {
    if (n.touches.length == 1) {
      if (!this.hasMoved && !this.$box.hasClass("fullscreen")) {
        this.$box.find(".two-finger-overlay").addClass("visible");
        return;
      }
      n.preventDefault();
      let t = n.touches[0],
        i = this.touches[0],
        r = t.clientX - i.clientX,
        u = t.clientY - i.clientY;
      this.translateX += r / this.scale;
      this.translateY += u / this.scale;
      this.Render();
      this.touches = n.touches;
    } else if (n.touches.length == 2) {
      n.preventDefault();
      this.hasMoved = !0;
      let t = ZoomBox.CalculateMidpoint(...n.touches),
        i = ZoomBox.CalculateMidpoint(...this.touches),
        r = t.x - i.x,
        u = t.y - i.y;
      this.translateX += r / this.scale;
      this.translateY += u / this.scale;
      let f = ZoomBox.GetPointDistance(...n.touches),
        e = ZoomBox.GetPointDistance(...this.touches),
        o = f / e;
      this.SetMouseCoords(t.x, t.y);
      this.ScaleBy(o);
      this.Render();
      this.touches = n.touches;
    }
  }
  static GetPointDistance(n, t) {
    let i = Math.abs(n.clientX - t.clientX),
      r = Math.abs(n.clientY - t.clientY),
      u = Math.pow(i, 2) + Math.pow(r, 2);
    return Math.sqrt(u);
  }
  static CalculateMidpoint(n, t) {
    let i = { x: 0, y: 0 };
    return (
      (i.x = n.clientX + (t.clientX - n.clientX) / 2),
      (i.y = n.clientY + (t.clientY - n.clientY) / 2),
      i
    );
  }
  HandleMouseWheel(n) {
    let t = n.deltaY || n.originalEvent.deltaY;
    if (t == null) {
      console.error("Unable to get scroll change");
      return;
    }
    n.preventDefault();
    this.SetMouseCoords(n.clientX, n.clientY);
    t > 0 ? this.ScaleBy(10 / 11) : this.ScaleBy(1.1);
    this.Render();
  }
  Render() {
    let i = this.$box.find(".zoom-content"),
      n,
      t;
    n = (i.width() * this.scale - this.$box.width()) / this.scale / 2;
    t = (i.height() * this.scale - this.$box.height()) / this.scale / 2;
    n < 0 && (n = 0);
    t < 0 && (t = 0);
    this.translateX = Math.max(Math.min(this.translateX, n), n * -1);
    this.translateY = Math.max(Math.min(this.translateY, t), t * -1);
    let r = "scale(" + this.scale + ")",
      u = "translateX(" + this.translateX + "px)",
      f = "translateY(" + this.translateY + "px)";
    i.css("transform", r + u + f);
    this.mouseX = 0;
    this.mouseY = 0;
  }
  ScaleBy(n) {
    let t = this.scale;
    this.scale = this.scale * n;
    this.scale < this.minScale && (this.scale = this.minScale);
    this.scale > this.maxScale && (this.scale = this.maxScale);
    n = this.scale / t;
    this.translateX += (this.mouseX - this.mouseX * n) / this.scale;
    this.translateY -= (this.mouseY - this.mouseY * n) / this.scale;
  }
  SetMouseCoords(n, t) {
    let i = this.$box.offset(),
      r = this.$box.height() / 2 + i.top - window.scrollY,
      u = this.$box.width() / 2 + i.left - window.scrollX;
    this.mouseX = n - u;
    this.mouseY = r - t;
  }
}
